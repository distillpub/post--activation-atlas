{
  "version": 3,
  "file": "main.css",
  "sources": [
    "../../src/library/Tooltip.html",
    "../../src/library/PageRuler.html",
    "../../src/library/LazyComponent.html",
    "../../src/library/LazyImage.html",
    "../../src/library/NotebookLink.html",
    "../../src/components/AtlasTooltip.html",
    "../../src/components/App.html",
    "../../src/diagrams/Overview.html",
    "../../src/diagrams/ModelOverview.html",
    "../../src/diagrams/ClassSubset.html",
    "../../src/diagrams/GridDetail.html",
    "../../src/diagrams/ClassAtlas.html",
    "../../src/diagrams/ClassFilterComparison.html",
    "../../src/diagrams/ClassComparison.html",
    "../../src/diagrams/ClassGradient.html",
    "../../src/diagrams/Adversarial.html",
    "../../src/diagrams/Samples.html",
    "../../src/diagrams/ClassGrids.html",
    "../../src/diagrams/ActivationGrid.html",
    "../../src/diagrams/OneLayer.html",
    "../../src/diagrams/LayerAnnotation.html",
    "../../src/diagrams/ShowAPath.html",
    "../../src/diagrams/VerticalLayerStatic.html",
    "../../src/diagrams/Focus1Static.html",
    "../../src/diagrams/Focus2Static.html",
    "../../src/diagrams/Focus3Static.html",
    "../../src/diagrams/Focus3TableStatic.html",
    "../../src/diagrams/PatchExamples.html",
    "../../src/library/Loading.html",
    "../../src/library/Placeholder.html",
    "../../src/Atlas.html",
    "../../src/library/Button.html",
    "../../src/components/AppMiniMap.html",
    "../../src/components/AppLayerChooser.html",
    "../../src/components/AppClassFilter.html",
    "../../src/library/ResponsiveResizer.html",
    "../../src/AtlasReticle.html",
    "../../src/SetOfIcons.html",
    "../../src/AtlasStaticReticle.html",
    "../../src/components/Loupe.html",
    "../../src/library/App/Panel.html",
    "../../src/library/D3Zoom.html",
    "../../src/AtlasThumbnail.html"
  ],
  "sourcesContent": [
    "<!-- \n  //You first must add one component to the root document.\n  //It will automatically follow the mouse position.\n  //You should also save it to your global store, so all components have access.\n  //You must also pass in what component to use for rendering the data you will pass later.\n\n\t// A global tooltip\n\tstore.set({\n\t\ttooltip: new Tooltip({\n\t\t\ttarget: document.body,\n      store,\n\t\t\tdata: {\n\t\t\t\tcomponent: AtlasTooltip\n\t\t\t}\n\t\t})\n\t});\n\n  //When you want to show it:\n  const { tooltip } = this.store.get();\n  tooltip.show(\n    {\n      message: \"hello\"\n    }\n  );\n\n  //And when you want to hide it: \n  const { tooltip } = this.store.get();\n  tooltip.hide();\n\n -->\n\n<svelte:document on:mousemove=\"mousemove(event)\" on:scroll=\"hide()\"/>\n\n<div ref:root {style}>\n  {#if component}\n    <svelte:component this={component} ref:component/>\n  {/if}\n</div>\n\n<script>\n  export default {\n    data() {\n      return {\n        visible: false,\n        width: 150,\n        height: 200,\n        component: null,\n      }\n    },\n    computed: {\n      style: ({x, width, y, height, visible}) => {\n        if (visible === false) {\n          return \"display: none;\";\n        } else {\n          const scrollLeft = document.documentElement.scrollLeft;\n          const scrollTop = Math.max(window.pageYOffset, document.documentElement.scrollTop, document.body.scrollTop);\n          const rightEdge = document.documentElement.clientWidth - width;\n          const bottomEdge = document.documentElement.clientHeight - height;\n          let left = Math.min(x, rightEdge);\n          let top = Math.min(y, bottomEdge);\n          if (x >= rightEdge && y >= bottomEdge) {\n            left = x - width;\n          }\n          return `width: ${width}px; top: ${top + scrollTop}px; left: ${left + scrollLeft}px;`;\n        }\n      },\n    },\n    methods: {\n      mousemove: function(event) {\n        const {visible} = this.get();\n        if (visible) {\n          this.set({\n            x: event.clientX,\n            y: event.clientY\n          });\n        }\n      },\n      show: function(d) {\n        this.set({visible: true});\n        this.refs.component.set(d);\n      },\n      hide: function() {\n        this.set({\n          visible: false\n        });\n        \n      }\n    }\n  }\n</script>\n\n<style>\n  ref:root {\n    box-sizing: border-box;\n    pointer-events: none;\n    z-index: 1000000;\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n</style>",
    "<div class=\"base-grid\">\n  <div ref:screen bind:offsetWidth=\"$screenWidth\" style=\"grid-column: screen;\"></div>\n  <div ref:page bind:offsetWidth=\"$pageWidth\" style=\"grid-column: page;\"></div>\n  <div ref:text bind:offsetWidth=\"$textWidth\" style=\"grid-column: text;\"></div>\n</div>\n\n<script>\n\nexport default {\n  oncreate() {\n    this.measure();\n  },\n  methods: {\n    measure() {\n    }\n  }\n}\n</script>\n\n<style>\n  .base-grid {\n    position: fixed;\n    width: 100%;\n    visibility: hidden;\n    contain: strict;\n  }\n  ref:screen { border: solid 1px magenta; }\n  ref:page { border: solid 1px cyan; }\n  ref:text { border: solid 1px yellow; }\n</style>",
    "<!-- \n  Defers initialization of a component until it comes into view.\n  Also allows for external loading of the component's module.\n\n  component: a constructor for the component to initialize lazily.\n  componentData: The data to pass to the component when initializing.\n\n  This requires us to know the size of the component before it's initialized.\n  If nothing is provided, we assign the parent width: 100%; and height: 100%; \n  so you can control its size with a wrapper container with position: relative;\n\n  If you want to control the size directly, you can do so with two properties:\n\n  height: Simply uses this constant value. If a number is given, assumed to be\n  pixel height. If a string is given, a css value is assumed and pased directly\n  to a css height: \"...\" declaration. Thus you can use \"10vh\" as a value.\n\n  aspectRatio (w/h): used the width of the element to compute the height based on \n  this ratio. When aspectRatio is used, an optional property \"minHeight\" is \n  available and any height values given are ignored.\n -->\n\n<svelte:window on:resize=\"measure()\" />\n\n<div ref:container style=\"width: {finalWidth}; height: {finalHeight};\">\n  <Radar bind:ready=\"radarReady\" :offscreen :onscreen height=\"100%\">\n    {#if finalReady}\n      <svelte:component ref:component this={component} {clientWidth} {clientHeight} {...componentData} />\n    {:else}\n      <Loading />\n    {/if}\n  </Radar>\n</div>\n\n<script>\n  export default {\n    components: {\n      Radar: \"./Radar.html\",\n      Loading: \"./Loading.html\"\n    },\n    data() {\n      return {\n        component: null,\n        url: null,\n        componentData: null,\n        radarReady: false,\n        onscreen: false,\n        offsreen: true,\n        height: null,\n        width: null,\n        aspectRatio: null,\n        minHeight: null,\n        clientWidth: 500,\n        clientHeight: 500\n      }\n    },\n    computed: {\n      finalReady: ({radarReady, component, clientWidth}) => (clientWidth && radarReady && component) ? true : false,\n      finalWidth: ({width}) => {\n        if (width) {\n          if (typeof width == \"number\") { return width + \"px\" }\n          if (typeof width == \"string\") { return width }\n        } else {\n          return \"100%\"\n        }\n      },\n      finalHeight: ({clientWidth, height, aspectRatio, minHeight}) => {\n        if (aspectRatio) {\n          let h = clientWidth / aspectRatio;\n          if (minHeight) {\n            return Math.min(minHeight, h) + \"px\";\n          } else {\n            return h + \"px\";\n          }\n        } else if (height) {\n          if (typeof height == \"number\") { return height + \"px\" };\n          if (typeof height == \"string\") { return height };\n        } else {\n          return \"100%\";\n        }\n      }  \n    },\n    oncreate() {\n      // TODO: Make sure we have some sizes set.\n      const {height, aspectRatio} = this.get();\n      if (!height && !aspectRatio) {\n        console.warn(`Require 'height'${height} or 'aspectRatio'${aspectRatio} not set on LazyComponent.html`, this)\n      }\n      setTimeout(() => this.measure(), 10);\n      // this.measure();\n      \n    },\n    methods: {\n      measure() {\n        this.set({\n          clientWidth: this.refs.container.offsetWidth,\n          clientHeight: this.refs.container.offsetHeight,\n        })\n      },\n      getComponent() {\n        return this.refs.component;\n      }\n    },\n\n  }\n</script>\n\n<style>\nref:container {\n  box-sizing: border-box;\n  display: block;\n  position: relative;\n  overflow: hidden;\n  contain: content;\n}\n</style>",
    "<div ref:root class=\"{background ? 'background' : ''} {border ? 'border' : ''}\">\n  <Radar bind:ready>\n    <Placeholder {aspectRatio}>\n      {#if ready}\n        <img ref:image src=\"{src}\" alt=\"{alt}\" style={style}>\n      {:else}\n        <Loading />\n      {/if}\n    </Placeholder>\n  </Radar>\n</div>\n\n<script>\n  export default {\n    components: {\n      Radar: \"./Radar.html\",\n      Loading: \"./Loading.html\",\n      Placeholder: \"./Placeholder.html\"\n    },\n    data() {\n      return {\n        ready: false,\n        src: \"\",\n        alt: \"\",\n        style: \"\",\n        display: \"block\", //\"inline\", \"inline-block\", \"block\"\n        aspectRatio: 1, // width/height\n        border: true,\n        background: false,\n      }\n    }\n  }\n</script>\n\n<style>\nref:root {\n  contain: content;\n  overflow: hidden;\n}\n.background {\n  background: rgba(0, 0, 0, 0.05);\n}\n.border {\n  border: 1px solid rgba(0, 0, 0, 0.1);\n}\nref:image {\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n</style>",
    "<!-- \n  A link to a ipynb or other such computational notebook. \n  Shows an icon and some text.\n  There are three levels of emphasis available as well: 0, 1, 2 with 1 default.\n -->\n\n<a href={url} class=\"root emphasis-{emphasis}\">\n  <svg viewBox=\"0 0 18 18\">\n    <path d=\"M14,2c0-0.3-0.2-0.5-0.5-0.5S13,1.7,13,2v12c0,0.6-0.4,1-1,1H3.1c-0.3,0-0.5-0.1-0.7-0.3L1.7,14h8.8c0.8,0,1.5-0.7,1.5-1.5\n      l0-11C12,0.7,11.3,0,10.5,0l-9,0C0.7,0,0,0.7,0,1.5v12.1c0,0.3,0.1,0.5,0.3,0.7l1.4,1.4C1.9,15.9,2.1,16,2.4,16h10.1\n      c0.8,0,1.5-0.7,1.5-1.5l0-1.8C14,9,14,2,14,2z M9.1,9.6c0,0.3-0.2,0.5-0.5,0.5H5.4c-0.3,0-0.5-0.2-0.5-0.5s0.2-0.5,0.5-0.5h3.1\n      C8.8,9.1,9.1,9.3,9.1,9.6z M2.3,4.7C2.1,4.5,2.1,4.2,2.3,4C2.5,3.8,2.8,3.8,3,4l2.8,2.6L3,9.3C2.9,9.4,2.8,9.4,2.7,9.4\n      c-0.1,0-0.3-0.1-0.4-0.2c-0.2-0.2-0.2-0.5,0-0.7l2-1.9L2.3,4.7z\"/>\n  </svg>\n  <span>{text}</span>\n</a>\n\n<script>\nexport default {\n  data() {\n    return {\n      url: \"https://colab.research.google.com/github/tensorflow/lucid/blob/master/notebooks/activation-atlas/activation-atlas-simple.ipynb\",\n      text: \"Try in a notebook\",\n      emphasis: 1, // 0,1,2\n    }\n  }\n}\n</script>\n\n<style>\n  .root {\n    position: relative;\n    display: inline-block;\n    padding: 4px 8px 4px 24px;\n    border-radius: 4px;\n    font-size: 11px!important;\n    text-decoration: none;\n    font-weight: 500;\n    border: solid 1px rgba(0, 0, 0, 0.1);\n    text-transform: uppercase;\n    line-height: 16px;\n  }\n  .emphasis-0.root {\n    border-color: rgba(0, 0, 0, 0);\n    color: #ff6600;\n  }\n  .emphasis-1.root {\n    border-color: rgba(0, 0, 0, 0.1);\n    color: #ff6600;\n  }\n  .emphasis-1.root:hover {\n    border-color: rgba(0, 0, 0, 0.2);\n  }\n  .emphasis-2.root {\n    border-color: #ff6600;\n    color: white;\n    background: #ff6600;\n  }\n  svg {\n    position: absolute;\n    top: 4px;\n    left: 4px;\n    width: 18px;\n    display: inline-block;\n  }\n  .emphasis-0 svg * {\n    fill: #ff6600;\n  }\n  .emphasis-1 svg * {\n    fill: #ff6600;\n  }\n  .emphasis-2 svg * {\n    fill: white;\n  }\n  span {\n    display: inline-block;\n  }\n</style>",
    "<div class=\"hover\">\n  <table>\n  {#if top_class_indices}\n    {#each top_class_indices.slice(0,5) as top, i}\n      <tr>\n        <td style=\"width: 10px; text-align: right; padding-right: 4px;\">{i + 1}.</td>\n        <td class=\"{i == 0 ? 'first': ''}\">{$inceptionLabels[top]}</td>\n        <td style=\"text-align: right;\">{format(top_class_values[i])}</td>\n      </tr>\n    {/each}\n  {/if}\n  </table>\n  <div style=\"font-size: 10px; margin-top: 4px; color: #999; text-align: right;\">Average of {formatLarge(num_activations)} activations</div>\n\n</div>\n\n<script>\n  import {format} from \"d3-format\";\n\n  export default {\n    helpers: {\n      format: format(\".2f\"),\n      formatLarge: format(\",\")\n    }\n  }\n</script>\n\n<style>\n.hover {\n  margin: 30px;\n  color: white;\n  font-size: 12px;\n  line-height: 14px;\n  background: rgba(0, 0, 0, 0.8);\n  padding: 8px;\n  border-radius: 6px;\n  border: solid 1px rgba(255, 255, 255, 0.4);\n  box-sizing: border-box;\n  box-shadow: 0 1px 8px rgba(0, 0, 0, 0.4);\n  z-index: 10000;\n}\n.hover table {\n  width: 100%;\n  margin-bottom: 0;\n}\n.hover td {\n  font-size: 12px;\n  border-bottom: solid 1px rgba(255, 255, 255, 0.2);\n  padding: 6px 0;\n  margin: 6px 0;\n  color: rgba(255, 255, 255, 0.8);\n  overflow: ellipsis;\n}\n.hover td.first {\n  color: rgba(255, 255, 255, 1.0);\n  font-weight: bold;\n}\n\n.icon {\n  display: block;\n  position: absolute;\n  top: 0;\n  left: 0;\n  border-radius: 4px;\n  border: solid 3px black;\n  pointer-events: none;\n  box-sizing: border-box;\n}\n</style>",
    "<ResponsiveResizer {clientWidth} {clientHeight} minWidth={768}>\n  <div class=\"container\">\n  <aside class=\"sidebar\">\n    {#if backLink}\n      <a class=\"backlink\" href={backLink}>← back to main article</a>\n    {/if}\n    <div class=\"panels\">\n      <div class=\"filter\" style=\"display: {showClassFilter ? 'block' : 'none'}\">\n        <Panel>\n          <h2 slot=\"head\">Class Filter</h2>\n          <div slot=\"body\">\n            <AppClassFilter\n              bind:classHeatmap\n            />\n          </div>\n        </Panel>\n      </div>\n      <div class=\"stack\" style=\"display: {showLayerChooser ? 'block' : 'none'};\">\n        <Panel>\n          <h2 slot=\"head\">Layer</h2>\n          <div slot=\"body\">\n            <AppLayerChooser\n              bind:layerName\n              {classHeatmap}\n            />\n          </div>\n        </Panel>\n      </div>\n    </div>\n  </aside>\n  <div class=\"main\">\n    <div class=\"atlas\">\n        <Atlas\n          ref:atlas\n          id=\"inceptionv1_{layerName}\"\n          strokeColor=\"#666\"\n          backgroundColor=\"#dfdfdf\"\n          showHoverImage={false}\n          bind:density\n          {classHeatmap}\n          bind:iconCrop \n          bind:classHeatmapMultiplier\n          bind:classHeatmapPositive\n          bind:autoGridSizeMultiplier\n          bind:gridSize\n          bind:showLabels\n          bind:enableHover\n          bind:scale\n          bind:gcx\n          bind:gcy\n          bind:extent\n          bind:scrollWheel=\"$scroll\"\n          {homeX}\n          {homeY}\n          {homeScale}\n        />\n        <div ref:controls class=\"controls {showOptions ? 'open' : 'closed'}\">\n          <div class=\"nav\">\n            <div class=\"map\">\n              <div class=\"map-container\" style=\"width: 100px; height: 100px; position: absolute;\">\n                <AppMiniMap \n                  id=\"inceptionv1_{layerName}\"\n                  {layerName}\n                  bind:extent\n                  enableDragging={true}\n                  {classHeatmap}\n                  {scaleCountFactor}\n                  on:drag=\"refs.atlas.translateTo(event.gcx, event.gcy)\"\n                />\n              </div>\n            </div>\n            <div class=\"buttons\">\n              <Button on:click=\"refs.atlas.home(3000)\"><Navigation name=\"home\" color=\"white\"/></Button>\n              <Button on:click=\"refs.atlas.scaleBy(2)\"><Navigation name=\"add\" color=\"white\"/></Button>\n              <Button on:click=\"refs.atlas.scaleBy(0.5)\"><Navigation name=\"remove\" color=\"white\"/></Button>\n            </div>\n          </div>\n          <div class=\"options\">\n            <div class=\"essential\">\n              <label style=\"white-space: nowrap;text-overflow: ellipsis;overflow: hidden;\"><input type=checkbox bind:checked=showLabels> attribution labels</label>\n              <label><input type=checkbox bind:checked=\"enableHover\"> show tooltip</label>\n              <label><input type=checkbox bind:checked=\"$scroll\"> scroll to zoom</label>\n              {#if shareLink}\n                <button style=\"font-size: 10px; margin-top: 4px;\" href=\"#\" on:click=\"copyShareLink()\">Copy link to this view</button>\n              {/if}\n            </div>\n            <div ref:expand class=\"expand\">\n              <div class=\"grid-size\">\n                \n                <div class=\"section\">\n                  <h3>Grid size</h3>\n                  <label><input type=radio bind:group=gridSize value={0}> 20x20</label>\n                  <label><input type=radio bind:group=gridSize value={1}> 40x40</label>\n                  <label><input type=radio bind:group=gridSize value={2}> 80x80</label>\n                  <label><input type=radio bind:group=gridSize value={3}> 160x160</label>\n                  <label><input type=radio bind:group=gridSize value={4}> 320x320</label>\n                  <label><input type=radio bind:group=gridSize value={-1}> auto</label>\n                  <div style=\"display: {gridSize == -1 ? 'none': 'none'};\">\n                    <div>auto threshold: {@html autoGridSizeMultiplier}</div>\n                    <input type=\"range\" min={0.5} max={1.4} step={0.01} bind:value=autoGridSizeMultiplier>\n                  </div>\n                  </div>\n                <div class=\"section\" >\n                  <h3>Icon density: {@html density}</h3>\n                  <input type=\"range\" min={0.2} max={8} step={0.01} bind:value=density>\n                  <!-- <br>\n                  <div>crop: {@html iconCrop}</div>\n                  <input type=\"range\" min={0} max={0.5} step={0.01} bind:value=iconCrop> -->\n                </div>\n                <div class=\"section\"  style=\"display: {classHeatmap > -1 ? 'block' : 'none'}\">\n                  <h3>Class filter</h3>\n                  <label><input type=radio bind:group=classHeatmapPositive value={1}> positive influence</label>\n                  <label><input type=radio bind:group=classHeatmapPositive value={-1}> negative influence</label>\n                  <div>Intensity: {@html classHeatmapMultiplier}</div>\n                  <input type=\"range\" min=0.5 max=2 step=0.1 bind:value=classHeatmapMultiplier>\n                </div>\n                <div class=\"section\">\n                  <h3>Location</h3>\n                  <div>x: {format(gcx)}</div>\n                  <div>y: {format(gcy)}</div>\n                  <div>scale: {format(scale)}</div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div class=\"expand-toggle\">\n            <button on:click=\"toggle()\">{@html showOptions ? 'fewer options' : 'more options'}</button>\n          </div>\n        </div>\n    </div>\n  </div>\n</div>\n</ResponsiveResizer>\n\n<script>\nimport {format as f} from \"d3-format\";\nimport {locationWithoutQuery} from \"../util.js\";\n\nconst formatFloat = f(\".3f\");\n\nexport default {\n  components: { \n    Button: \"../library/Button.html\",\n    Navigation: \"../library/icons/Navigation.html\",\n    AppMiniMap: \"./AppMiniMap.html\",\n    AppLayerChooser: \"./AppLayerChooser.html\",\n    AppClassFilter: \"./AppClassFilter.html\",\n    Atlas: \"../Atlas.html\",\n    Panel: \"../library/App/Panel.html\",\n    ResponsiveResizer: \"../library/ResponsiveResizer.html\"\n  },\n  data() {\n    return {\n      layerName: \"mixed4c\",\n      gridSize: 1,\n      classHeatmap: -1,\n      iconScaleFactor: 0.8,\n      iconCrop: 0.35,\n      showClassFilter: true,\n      showLayerChooser: true,\n      showOptions: true,\n      homeX: .5,\n      homeY: .5,\n      homeScale: 1,\n      shareLink: false,\n      backLink: false\n    }\n  },\n  oncreate() {\n    const {loadTarget} = this.get();\n    const query = new URLSearchParams(window.location.search);\n    if (query.has(\"layer\")) {\n      const layerName = decodeURIComponent(query.get(\"layer\"));\n      this.set({layerName});\n    }\n    if (loadTarget) {\n      setTimeout(() => {\n      this.zoomTo(loadTarget.x, loadTarget.y, loadTarget.scale, 0);\n      }, 10);\n    }\n    if (query.has(\"poi\")) {\n      const poiString = query.get(\"poi\");\n      const parts = poiString.split(\",\").map(parseFloat);\n      setTimeout(() => {\n        this.zoomTo(...parts, 4000);\n      }, 1000);\n    }\n  },\n  computed: {\n    realGridSize: ({gridSize}) => (gridSize + 1) * 20,\n    scaleCountFactor: ({iconScaleFactor, realGridSize}) =>  1000000 / (realGridSize * realGridSize * iconScaleFactor)\n  },\n  methods: {\n    home(duration) {\n      this.refs.atlas.home(duration)\n    },\n    zoomTo(x, y, scale, duration = 1000) {\n      this.refs.atlas.zoomTo(x, y, scale, duration);\n    },\n    toggle() {\n      const {showOptions} = this.get();\n      this.set({\n        showOptions: !showOptions\n      });\n    },\n    copyShareLink() {\n      const {layerName} = this.get();\n      const {gcx, gcy, scale} = this.refs.atlas.get();\n      const query = `layer=${encodeURIComponent(layerName)}&poi=${[gcx, gcy, scale].map(formatFloat).join(\",\")}`;\n      const url = locationWithoutQuery() + \"?\" + query;\n      window.navigator.clipboard.writeText(url).then(function() {\n        console.log(\"Copied to clipboard\");\n      }, function() {\n        console.error(\"Unable to copy to clipboard\");\n      });\n    }\n  },\n  helpers: {\n    format: formatFloat\n  }\n}\n</script>\n\n<style>\n  .container {\n    height: 100%;\n    box-sizing: border-box;\n    grid-column: screen;\n    display: flex;\n    overflow: hidden;\n    contain: strict;\n    font-size: 12px;\n    position: relative;\n  }\n\n  .sidebar {\n    display: flex;\n    flex-direction: column;\n  }\n\n  .panels {\n    display: flex;\n    flex-direction: row;\n    height: 100%;\n  }\n\n  .backlink {\n    display: flex;\n    flex-shrink: 0;\n    align-items: center;\n    height: 40px;\n    border-bottom: 1px solid rgba(0, 0, 0, 0.2);\n    border-right: 1px solid rgba(0, 0, 0, 0.2);\n    padding: 0 16px;\n    font-size: 11px;\n    font-weight: 500;\n    text-decoration: none;\n    text-transform: uppercase;\n    color: black;\n  }\n\n  .backlink:hover {\n    background-color: rgba(255, 130, 0, 0.04);\n  }\n\n  /*  */\n  .filter {\n    width: 120px;\n    border-right: solid 1px rgba(0, 0, 0, 0.2);\n  }\n  .stack {\n    overflow-y: scroll;\n    width: 120px;\n    border-right: solid 1px rgba(0, 0, 0, 0.2);\n    height: 100%;\n  }\n  .main {\n    flex-grow: 1;\n    padding: 8px;\n    box-sizing: border-box;\n    height: 100%;\n  }\n  .atlas {\n    height: calc(100%);\n    position: relative;\n  }\n  /*  */\n\n\n\n  /*  */\n  .controls {\n    position: absolute;\n    box-sizing: border-box;\n    box-shadow: 0 0 10px rgba(0, 0, 0, 0.2);\n    right: 16px;\n    top: 16px;\n    width: 122px;\n    padding: 8px;\n    background-color: white;\n    border-radius: 6px;\n    border: solid 1px rgba(0, 0, 0, 0.2);\n    line-height: 1.7em;\n    font-size: 10px;\n    display: flex;\n    flex-direction: column;\n    max-height: calc(100% - 48px);\n  }\n\n  ref:controls label {\n    display: block;\n    color: rgba(0, 0, 0, 0.7);\n  }\n  \n  ref:controls .nav {\n    flex: 0 0 auto;\n    display: flex;\n    border-bottom: solid 1px rgba(0, 0, 0, 0.1);\n    padding-bottom: 8px;\n  }\n  ref:controls .nav .map {\n    position: relative;\n    visibility: hidden;\n    width: 0;\n    height: 0;\n    pointer-events: none;\n  }\n  ref:controls .nav .buttons {\n    width: 100%;\n    justify-items: center;\n    display: grid;\n    grid-gap: 4px;\n    grid-auto-columns: auto;\n    grid-auto-flow: column;\n  }\n  ref:controls .expand-toggle {\n    flex: 0 0 auto;\n    /* border-top: solid 1px rgba(0, 0, 0, 0.1); */\n    /* padding-top: 8px; */\n  }\n  ref:controls .expand-toggle button {\n    display: block;\n    width: 100%;\n    line-height: 1.5em;\n    font-size: 10px;\n  }\n\n  ref:controls .section {\n    margin-top: 8px;\n    border-top: solid 1px rgba(0, 0, 0, 0.1);\n    padding-top: 8px;\n    color: rgba(0, 0, 0, 0.7);\n  }\n\n  ref:controls .section h3 {\n    color: rgba(0, 0, 0, 1);\n    margin: 0 0 4px 0;\n    font-weight: 500;\n    text-transform: uppercase;\n    font-size: 11px;\n  }\n\n  ref:controls .options {\n    flex: 1 1;\n    overflow-y: scroll;\n    padding-top: 8px;\n    padding-bottom: 8px;\n  }\n  ref:controls.closed .expand {\n    height: 0;\n    overflow: hidden;\n  }\n  ref:controls.open .expand {\n    height: auto;\n  }\n  ref:controls.open .options {\n    margin-bottom: 8px;\n    border-bottom: solid 1px rgba(0, 0, 0, 0.1);\n  }\n  @media(min-width: 800px) {\n    .filter {\n      width: 170px;\n    }\n    .stack {\n      width: 170px;\n    }\n    .controls {\n      width: 160px;\n    }\n    ref:controls .nav .map {\n      visibility: visible;\n      height: auto;\n      width: 104px;\n      margin-right: 8px;\n      pointer-events: all;\n    }\n    ref:controls .nav .buttons {\n      width: inherit;\n      grid-auto-flow: row;\n    }\n  }\n\n</style>\n",
    "<div ref:root>\n  <div class=\"section\">\n    <h4>Individual Neurons</h4>\n    <div class=\"image\">\n      <LazyImage\n        src=\"assets/images/overview-neuron.jpg\"\n        border={false}\n      />\n    </div>\n    <div class=\"diagram\">\n      <LazyImage src=\"assets/images/manifold-1.jpg\" alt=\"diagram\" border={false} />\n    </div>\n    <div class=\"figcaption\"><a href=\"https://distill.pub/2017/feature-visualization/#optimization\">Visualizing individual neurons</a> make hidden layers somewhat meaningful, but misses interactions between neurons — it only shows us one-dimensional, orthogonal probes of the high-dimensional activation space.</div>\n  </div>\n  <div class=\"section\">\n    <h4>Pairwise Interactions</h4>\n    <div class=\"image\">\n      <LazyImage\n        src=\"assets/images/overview-pairwise.jpg\"\n        border={false}\n      />\n    </div>\n    <div class=\"diagram\">\n      <LazyImage src=\"assets/images/manifold-2.jpg\" alt=\"diagram\" border={false} />\n    </div>\n    <div class=\"figcaption\"><a href=\"https://distill.pub/2017/feature-visualization/#interaction\">Pairwise interactions</a> reveal interaction effects, but they only show two-dimensional slices of a space that has hundreds of dimensions, and many of the combinations are not realistic.</div>\n  </div>\n  <div class=\"section\">\n    <h4>Spatial Activations</h4>\n    <div class=\"image\">\n      <LazyImage\n        src=\"assets/images/activation-grid.png\"\n        border={false}\n      />\n    </div>\n    <div class=\"diagram\">\n      <LazyImage src=\"assets/images/manifold-3.jpg\" alt=\"diagram\" border={false} />\n    </div>\n    <div class=\"figcaption\"><a href=\"https://distill.pub/2018/building-blocks/#what-does-the-network-see\">Spatial activations</a> show us important combinations of many neurons by sampling the sub-manifold of likely activations, but they are limited to those that occur in the given example image.</div>\n  </div>\n  <div class=\"section\">\n    <h4>Activation Atlas</h4>\n    <div class=\"image\">\n      <LazyImage\n        src=\"assets/images/overview-atlas.jpg\"\n        border={false}\n      />\n    </div>\n    <div class=\"diagram\">\n      <LazyImage src=\"assets/images/manifold-4.jpg\" alt=\"diagram\" border={false} />\n    </div>\n    <div class=\"figcaption\">Activation atlases give us a bigger picture overview by sampling more of the manifold of likely activations.</div>\n  </div>\n</div>\n\n<script>\n  export default {\n    components: {\n      LazyImage: \"../library/LazyImage.html\"\n    }\n  }\n</script>\n\n<style>\nh4 {\n  border-bottom: solid 1px rgba(0, 0, 0, 0.1);\n  padding-bottom: 8px;\n  margin-top: 0;\n  margin-bottom: 12px;\n}\n.section {\n  display: grid;\n  grid-column-gap: 20px;\n  grid-template-columns: 1fr 1fr;\n  margin-bottom: 1em;\n}\n.section h4 {\n  grid-column: 1/3;\n}\n.section .figcaption {\n  grid-column: 1/3;\n  margin: 16px 0;\n}\n\n@media (min-width: 550px) {\n  .section {\n    grid-template-columns: 1fr 1fr 1fr;\n  }\n  .section h4 {\n    grid-column: 1/4;\n  }\n  .section .figcaption {\n    grid-column: 3/4;\n    margin: 0;\n  }\n}\n\n@media (min-width: 768px) {\n  .section {\n    display: block;\n  }\n  ref:root {\n    display: grid;\n    grid-gap: 40px;\n    grid-template-columns: 1fr 1fr 1fr 1fr;\n  }\n  .diagram {\n    position: relative;\n    box-sizing: border-box;\n    padding: 10px 0;\n  }\n}\n\n@media (min-width: 1000px) {\n  .diagram {\n    padding: 20px;\n  }\n}\n</style>",
    "<div ref:root>\n  <LazyImage src=\"assets/images/model.svg\" alt=\"model\" aspectRatio={1072 / 178.3} border={false} background={false}/>\n</div>\n\n<script>\n  export default {\n    components: {\n      LazyImage: \"../library/LazyImage.html\"\n    }\n  }\n</script>\n\n<style>\n  ref:root {\n    margin-bottom: 8px;\n  }\n</style>",
    "<h4>Class Activation Atlas for “{$inceptionLabels[$currentClassAtlasIndex]}” from mixed5b</h4>\n<div ref:root>\n  <div style=\"position: relative;\">\n    <ClassAtlas classFilter={$currentClassAtlasIndex}/>\n  </div>\n  <div class=\"chooser-container\">\n    <div class=\"chooser\">\n      {#each $classAtlasIndices as c}\n        <label class=\"{$currentClassAtlasIndex === c ? 'selected' : ''}\" title=\"{c}\">\n          <input type=radio bind:group=$currentClassAtlasIndex value={c}>\n          {$inceptionLabels[c]}\n        </label>\n      {/each}\n    </div>\n  </div>\n</div>\n<div style=\"margin-top: 16px;\">\n  <NotebookLink url=\"https://colab.research.google.com/github/tensorflow/lucid/blob/master/notebooks/activation-atlas/class-activation-atlas.ipynb\"/>\n</div>\n\n<script>\nimport classesToKeep from './../classesToKeep.js';\nexport default {\n  components: { \n    ClassAtlas: \"./ClassAtlas.html\",\n    NotebookLink: \"../library/NotebookLink.html\"\n  },\n  data() {\n    return {\n      layout: 0,\n    }\n  },\n  computed: {\n    // classes: ({$classChoices}) => classesToKeep\n  }\n}\n</script>\n\n<style>\n  ref:root {\n    position: relative;\n  }\n  h4 {\n    margin-top: 0;\n  }\n  button {\n    display: block;\n    width: 100%;\n  }\n  .chooser-container {\n    overflow-x: hidden;\n    overflow-y: scroll;\n    min-height: 160px;\n    height: 100%;\n    position: relative;\n  }\n\n  .chooser {\n    position: absolute;\n    border-left: solid 1px #ddd;\n    width: 100%;\n  }\n  .chooser label {\n    position: relative;\n    font-size: 10px;\n    line-height: 1em;\n    display: block;\n    border-left: solid 3px white;\n    padding: 5px 5px 5px 16px;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow-x: hidden;\n  }\n  .chooser label input {\n    position: absolute;\n    opacity: 0;\n  }\n  .chooser label:hover {\n    background-color: rgba(255, 130, 0, 0.04);\n  }\n  .chooser label.selected {\n    border-left-color: rgb(255, 130, 0);\n    color: rgb(255, 130, 0);\n    background-color: rgba(255, 130, 0, 0.08);\n    font-weight: bold;\n  }\n  @media(min-width: 600px) {\n    ref:root {\n      position: relative;\n      display: grid;\n      grid-template-columns: 4fr 1fr;\n      grid-gap: 20px;\n    }\n  }\n</style>\n",
    "\n<div class=\"root\">\n  <div>\n    <LazyImage \n      src=\"assets/images/dogcat.jpg\"\n      alt=\"input image\"\n    />\n    <div class=\"figcaption\">Input image from ImageNet.</div>\n  </div>\n  <div>\n    <LazyImage \n      src=\"assets/images/dogcat-grid.jpg\"\n      alt=\"activation grid\"\n    />\n    <div class=\"figcaption\">Activation grid from InceptionV1, layer mixed4d.</div>\n  </div>\n</div>\n\n<script>\nexport default {\n  components: {\n    LazyImage: \"../library/LazyImage.html\"\n  }\n}\n</script>\n\n<style>\n  .root {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    grid-gap: 10px;\n  }\n  .figcaption {\n    margin-top: 8px;\n  }\n</style>",
    "<div ref:root>\n\n  <LazyImage \n    {src}\n    alt=\"class activation atlas\"\n  />\n\n  <svg viewBox=\"0 0 500 500\">\n  {#each ticks as i}\n    <line x2={500} y1={500 * i / gridSize} y2={500 * i / gridSize} stroke=\"black\" stroke-opacity=\"0.15\" stroke-dasharray=\"2,2\"/>\n  {/each}\n  \n  {#each ticks as i}\n    <line y2={500} x1={500 * i / gridSize} x2={500 * i / gridSize} stroke=\"black\" stroke-opacity=\"0.15\" stroke-dasharray=\"2,2\"/>\n  {/each}\n  </svg>\n\n  {#each configData as cell}\n    <div class=\"label\" style=\"position: absolute; height: {100 / gridSize}%; width: {100 / gridSize}%;left: {(cell.y) / gridSize * 100}%; top: {(cell.x) / gridSize * 100}%;\">\n      <div title=\"{$inceptionLabels[cell.i[0]]}\">{$inceptionLabels[cell.i[0]]}</div>\n    </div>\n  {/each}\n\n</div>\n\n<script>\n  import {range} from \"d3-array\";\n  import { default as load } from '../library/load.js';\n\n  export default {\n    components: {\n      LazyImage: '../library/LazyImage.html'\n    },\n    data() {\n      return {\n        w: 500,\n        filterType: \"winner\",\n        classFilter: 62,\n        gridSize: 8,\n        configData: [],\n        showAttribution: false\n      }\n    },\n    computed: {\n      cellSize: ({w, gridSize}) => w / gridSize,\n      root: ({filterType}) => `gcs-back/class_filter_inceptionv1_${filterType}/`,\n      ticks: ({gridSize}) => range(1, gridSize),\n      config: ({root, classFilter, gridSize, filterType}) => `${root}web/web--grid_size=${gridSize}--layout=20_0.02_cosine--class_filter=${classFilter}_${filterType}--filter=None--layer=mixed5b--model=InceptionV1--sample_images=1000000--sample_type=random.json`,\n      src: ({root, classFilter, gridSize, filterType}) => `${root}render/render--x=0--y=0--tries=3--alpha=False--tile_size=8--whiten=true--steps=1056--icon_size=80--grid_size=${gridSize}--layout=20_0.02_cosine--class_filter=${classFilter}_${filterType}--filter=None--layer=mixed5b--model=InceptionV1--sample_images=1000000--sample_type=random.jpg`\n    },\n    onupdate({ changed, current, previous }) {\n      if (current.showAttribution && changed.config) {\n        this.set({configData: []});\n        load(current.config).then(response => {\n          this.set({configData: response});\n        })\n      }\n    }\n  }\n </script>\n\n <style>\n  ref:root {\n    position: relative;\n  }\n  ref:root > * {\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n  .label > div {\n    position: absolute;\n    left: 0px;\n    bottom: 0px;\n    padding: 4px;\n    box-sizing: border-box;\n    font-size: 9px;\n    text-shadow: 0 0 5px black;\n    line-height: 1em;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n    width: 100%;\n    color: white;\n  }\n  svg {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n  }\n </style>",
    "\n\n<div class=\"root\">\n  \n  <div>\n    <h4>“{@html $inceptionLabels[$currentClassAtlasCompareIndex]}” <br>filtered by top rank</h4>\n    <div class=\"atlas\">\n      <ClassAtlas showAttribution={true} classFilter={$currentClassAtlasCompareIndex} filterType=\"winner\" />\n    </div>\n    <div class=\"figcaption\">We pluck only those activations whose top attribution is toward the class in question. The results are often much more focused and isolated, exclusive to the class. Some are low magnitude, like backgrounds, and we miss correlations or concepts that are shared among many classes. </div>\n  </div>\n  <div>\n    <h4>“{@html $inceptionLabels[$currentClassAtlasCompareIndex]}” <br>filtered by overall magnitude</h4>\n    <div class=\"atlas\">\n      <ClassAtlas showAttribution={true} classFilter={$currentClassAtlasCompareIndex} filterType=\"top\" />\n    </div>\n    <div class=\"figcaption\">Here we sort all the activations by the magnitude toward the class in question (independent of other classes) and take the top 2,000 activations. We see more correlated activations that could, on their own, contribute to another classification (We label each activation with the class that it contributes toward most). Notice that certain fish that are commonly seen while snorkeling now show up with that class, and a “coffee mug” now shows up with “crossword puzzle”. Some of them appear spurious, however.</div>\n  </div>\n  <div class=\"chooser-container\">\n    <div class=\"chooser\">\n      {#each $classAtlasIndices as c}\n        <label class=\"{$currentClassAtlasCompareIndex === c ? 'selected' : ''}\" title=\"{c}\">\n          <input type=radio bind:group=$currentClassAtlasCompareIndex value={c}>\n          {$inceptionLabels[c]}\n        </label>\n      {/each}\n    </div>\n  </div>\n</div>\n\n<script>\nexport default {\n  components: {\n    ClassAtlas: \"./ClassAtlas.html\"\n  },\n  data() {\n    return {\n    };\n  },\n  computed: {\n  }\n}\n</script>\n\n<style>\n.root {\n  max-width: 1200px;\n  padding: 0 20px;\n  margin: 0 auto;\n  display: grid;\n  grid-column-gap: 20px;\n  grid-template-columns: 1fr 1fr;\n}\nbutton {\n  display: block;\n}\n.figcaption {\n  margin-top: 20px;\n}\n.figcaption b {\n  text-transform: uppercase;\n  margin-right: 8px;\n}\nh4 {\n  margin-top: 0;\n}\n\n.chooser-container {\n  overflow-y: scroll;\n  overflow-x: hidden;\n  height: 100%;\n  position: relative;\n  min-height: 160px;\n  grid-column: 1/3;\n  margin-top: 16px;\n}\n\n.chooser {\n  position: absolute;\n  border-left: solid 1px #ddd;\n  width: 100%;\n}\n.chooser label {\n  position: relative;\n  font-size: 10px;\n  line-height: 1em;\n  display: block;\n  border-left: solid 3px white;\n  padding: 5px 5px 5px 16px;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  overflow-x: hidden;\n}\n.chooser label input {\n  position: absolute;\n  opacity: 0;\n}\n.chooser label:hover {\n    background-color: rgba(255, 130, 0, 0.04);\n  }\n.chooser label.selected {\n  border-left-color: rgb(255, 130, 0);\n  color: rgb(255, 130, 0);\n  background-color: rgba(255, 130, 0, 0.08);\n  font-weight: bold;\n}\n@media(min-width: 600px) {\n  .root {\n    display: grid;\n    grid-column-gap: 20px;\n    grid-template-columns: 1fr 1fr 120px;\n  }\n  .chooser-container {\n    grid-column: auto;\n    margin: 0;\n  }\n}\n</style>\n",
    "{#if showControls}\n  {#each $classComparisons as comparison, i}\n    <button on:click=\"set({classComparisonIndex: i})\">{comparison.leftLabel} vs. {comparison.rightLabel}</button>\n  {/each}\n{/if}\n\n<div style=\"display: grid; grid-auto-flow: column; grid-column-gap: 20px; grid-auto-columns: 1fr;\">\n  <div>\n    <h4>“{$inceptionLabels[leftIndex]}”</h4>\n    <div class=\"atlas\">\n      <ClassAtlas classFilter={leftIndex} {filterType} />\n    </div>\n  </div>\n  <div>\n    <h4>“{$inceptionLabels[rightIndex]}”</h4>\n    <div class=\"atlas\">\n      <ClassAtlas classFilter={rightIndex} {filterType} />\n    </div>\n  </div>\n</div>\n\n<script>\nexport default {\n  components: {\n    ClassAtlas: \"./ClassAtlas.html\"\n  },\n  data() {\n    return {\n      classComparisonIndex: 0,\n      showControls: true,\n      filterType: \"top\"\n    };\n  },\n  computed: {\n    leftIndex: ({$classComparisons, classComparisonIndex}) =>  $classComparisons[classComparisonIndex].left,\n    rightIndex: ({$classComparisons, classComparisonIndex}) => $classComparisons[classComparisonIndex].right,\n  }\n}\n</script>\n\n<style>\n.figcaption {\n  margin-top: 20px;\n}\n.figcaption b {\n  text-transform: uppercase;\n  margin-right: 8px;\n}\nh4 {\n  margin-top: 0;\n}\n</style>",
    "<!-- {#each $classComparisons as comparison, i}\n  <button on:click=\"set({currentClassComparisonIndex: i})\">{comparison.leftLabel} vs. {comparison.rightLabel}</button>\n{/each} -->\n\n<div class=\"overlay-wrap\" >\n  <svg class=\"overlay\" viewBox=\"0 0 {outerWidth} {outerHeight}\">\n\n    <!-- arrowheads -->\n\n  \t<defs>\n      \t<marker id=\"{'arrow'}\" markerWidth=\"7\" markerHeight=\"7\" refX=\"10\" refY=\"5\" orient=\"auto\" markerUnits=\"strokeWidth\" viewBox=\"0 0 10 10\">\n        \t\t<path d=\"M0,0 L0,10 L10,5 z\" fill=\"{color}\" />\n      \t</marker>\n  \t</defs>\n\n    <g transform=\"translate({margin.left},{margin.top})\">\n\n      <!-- image -->\n\n      <image \n        id=\"comparisonImg\"\n        {width}\n        {height}\n        xlink:href=\"gcs-back/gradients/gradients/gradients--comparison={comparison.id}--tries=4--alpha=False--tile_size=10--whiten=true--steps=1024--icon_size=90--grid_size=10--layer=mixed5b--model=InceptionV1--sample_images=1000000--sample_type=random.jpg\" \n        alt={comparison.label}\n      />\n\n      <!-- x-axis labels -->\n\n      <g transform=\"translate({width / 2}, 0)\">\n        <text y=\"-50\" text-anchor=\"end\">\n          <tspan x=\"-10\" dy=\"1.3em\">more attributed to </tspan>\n          <tspan x=\"-10\" dy=\"1.3em\" font-weight=\"bold\">{comparison.leftLabel}</tspan>\n        </text>\n        <text y=\"-50\">\n          <tspan x=\"10\" dy=\"1.3em\">more attributed to </tspan>\n          <tspan x=\"10\" dy=\"1.3em\" font-weight=\"bold\">{comparison.rightLabel}</tspan>\n        </text>\n\n        <g transform=\"translate(0, -28)\">\n          <line x2=\"-50\" transform=\"translate(-120,0)\" stroke={color} marker-end=\"url(#{'arrow'})\"></line>\n          <line x2=\"50\" transform=\"translate(120,0)\" stroke={color} marker-end=\"url(#{'arrow'})\"></line>\n        </g>\n      </g>\n\n      <!-- y-axis labels -->\n\n      <g transform=\"translate({- margin.left + 8},{height/2})\">\n        <g transform=\"translate(10, 0)\">\n          <line y2=\"-50\" transform=\"translate(0,-38)\" stroke={color} marker-end=\"url(#{'arrow'})\"></line>\n          <line y2=\"50\" transform=\"translate(0,30)\" stroke={color} marker-end=\"url(#{'arrow'})\"></line>\n        </g>\n        <text alignment-baseline=\"middle\">\n          <tspan x=\"0\" y=\"-1.8em\">positioned</tspan>\n          <tspan x=\"0\" y=\"-0.6em\">by similarity</tspan>\n          <tspan x=\"0\" y=\"0.6em\">(one-dimensional</tspan>\n          <tspan x=\"0\" y=\"1.8em\">t-SNE)</tspan>\n        </text>\n      </g>\n\n      <!-- Ticks -->\n\n      <g transform=\"translate({width / 2}, 0)\">\n        <line y1={-margin.top + 4} y2=\"{height + 8}\" stroke=\"white\" stroke-width=\"5\" stroke-opacity=\"0.6\"></line>\n        <line y1={-margin.top + 4} y2=\"{height + 8}\" stroke=\"black\"></line>\n      </g>\n\n      {#each range(11) as tick}\n        <line x2={width} transform=\"translate(0, {tick * (height / 10)})\" stroke=\"black\" stroke-opacity=\"0.15\" stroke-dasharray=\"2,2\"/>\n      {/each}\n\n      {#each range(11) as tick}\n        <line y2={width} transform=\"translate({tick * (height / 10)}, 0)\" stroke=\"black\" stroke-opacity=\"0.15\" stroke-dasharray=\"2,2\"/>\n      {/each}\n\n      <!-- Annotations -->\n\n      {#if comparison.annotation}\n        {#each comparison.annotation as annotation,iter}\n          <g transform=\"translate(0, {(annotation.pos.x + 0.5) * cellWidth})\">\n            <line x1={(annotation.pos.y + 0.5) * cellWidth + cellWidth / 2 * Math.sqrt(2)} x2={width + 5} stroke=\"black\" stroke-opacity=\"0.4\"/>\n            <text x={width + 10} alignment-baseline=\"middle\">{annotation.desc}</text>\n          </g>\n          <g transform=\"translate({(annotation.pos.y + 0.5) * cellWidth}, {(annotation.pos.x + 0.5) * cellWidth})\">\n            <circle r={cellWidth / 2 * Math.sqrt(2)} fill=\"none\" stroke=\"white\" stroke-opacity=\"0.5\" stroke-width=\"5\"/>\n            <circle r={cellWidth / 2 * Math.sqrt(2)} fill=\"none\" stroke=\"black\" stroke-opacity=\"1\"/>\n          </g>\n        {/each}\n      {/if}\n\n    </g>\n  </svg>\n</div>\n<script>\n\nimport {range} from \"d3-array\";\n\nexport default {\n  components: { \n  },\n  data() {\n    return {\n      width: 504,\n      selected: 0,\n      margin: {\n        top: 60,\n        right: 80,\n        bottom: 5,\n        left: 80\n      },\n      color: '#9a9cad',\n      currentClassComparisonIndex: 0\n    }\n  },\n  computed: {\n    height: ({width}) => width,\n    outerWidth: ({width, margin}) => width + margin.left + margin.right,\n    outerHeight: ({height, margin}) => height + margin.top + margin.bottom,\n    cellWidth: ({width}) => width / 10,\n    comparison: ({currentClassComparisonIndex, $classComparisons}) => $classComparisons[currentClassComparisonIndex],\n  },\n  helpers: {\n    range\n  }\n}\n</script>\n\n<style>\n  svg text {\n    font-size: 13px;\n    fill-opacity: 0.6;\n  }\n  .overlay-wrap {\n  \tposition: relative;\n  }\n</style>\n\n",
    "<div class=\"adversarial\" style=\"grid-template-columns: repeat({classifications.length}, 1fr);\">\n  {#each classifications as c}\n    <div class=\"class\">\n      <div class=\"image\">\n        <LazyImage \n          style=\"image-rendering: crisp-edges;image-rendering: pixelated;\"\n          src=\"{c.image}\"\n          alt=\"{left} / {right}\"\n          {aspectRatio}\n        />\n      </div>\n      <div class=\"table\">\n        <table>\n          {#each c.rows as row, i}\n          <tr class=\"{row[0] === left ? 'left' : ''} {row[0] === right ? 'right' : ''}\">\n            <td>{i + 1}. </td>\n            <td>{row[0]}</td>\n            <td>{f(row[1])}%</td>\n          </tr>\n          {/each}\n        </table>\n      </div>\n      <div class=\"figcaption\">{c.caption}</div>\n    </div>\n  {/each}\n</div>\n\n\n<script>\nimport {format} from \"d3-format\";\nexport default {\n  components: {\n    LazyImage: \"../library/LazyImage.html\"\n  },\n  data() {\n    return {\n      image: \"\",\n      left: \"\", \n      right: \"\",\n      classifications: [],\n      aspectRatio: 1\n    }\n  },\n  helpers: {\n    f: format(\".1f\")\n  }\n}\n</script>\n\n<style>\ntable {\n  width: 100%;\n  border-top: solid 1px #ddd;\n  margin: 0;\n}\ntable td {\n  padding: 2px 5px;\n  font-size: 11px;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  max-width: 100px;\n}\ntable td:last-child {\n  text-align: right;\n}\ntable tr:first-child {\n  font-weight: bold;\n}\n.left {\n  background-color: hsla(100, 90%, 50%, 0.15);\n}\n.right {\n  background-color: hsla(200, 90%, 50%, 0.15);\n}\n\n.class {\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 16px;\n  margin-bottom: 16px;\n}\n.figcaption {\n  grid-column: 1/3;\n  margin-bottom: 16px;\n}\n\n@media(min-width: 800px) {\n  .figcaption {\n    margin-bottom: 0;\n  }\n  .class {\n    display: block;\n  }\n  table {\n    margin: 8px 0 16px 0;\n  }\n  table td {\n    font-size: 13px;\n  }\n  .adversarial {\n    display: grid;\n    grid-column-gap: 30px;\n  }\n\n}\n\n</style>",
    "<div ref:root>\n  <div>\n    <LazyImage\n      src=\"assets/images/render--x%3D0--y%3D0--tries%3D4--alpha%3DFalse--tile_size%3D20--whiten%3Dtrue--steps%3D1024--icon_size%3D80--grid_size%3D20--layout%3D50_0.05_cosine--class_filter%3DNone--filter%3D10000--layer%3Dmixed4c--model%3DInceptionV1--sample_images%3D1000000--sample_type%3Drandom.jpg\"\n      alt=\"10,000 activations\"\n    />\n    <div style=\"margin-top: 4px;\">10,000 activations</div>\n  </div>\n  <div>\n    <LazyImage\n      src=\"assets/images/render--x%3D0--y%3D0--tries%3D4--alpha%3DFalse--tile_size%3D20--whiten%3Dtrue--steps%3D1024--icon_size%3D80--grid_size%3D20--layout%3D50_0.05_cosine--class_filter%3DNone--filter%3D100000--layer%3Dmixed4c--model%3DInceptionV1--sample_images%3D1000000--sample_type%3Drandom.jpg\"\n      alt=\"100,000 activations\"\n    />\n    <div style=\"margin-top: 4px;\">100,000 activations</div>\n  </div>\n  <div>\n    <LazyImage\n      src=\"assets/images/render--x%3D0--y%3D0--tries%3D4--alpha%3DFalse--tile_size%3D20--whiten%3Dtrue--steps%3D1024--icon_size%3D80--grid_size%3D20--layout%3D50_0.05_cosine--class_filter%3DNone--filter%3D1000000--layer%3Dmixed4c--model%3DInceptionV1--sample_images%3D1000000--sample_type%3Drandom.jpg\"\n      alt=\"1,000,000 activations\"\n    />\n    <div style=\"margin-top: 4px;\">1,000,000 activations</div>\n  </div>\n</div>\n\n<script>\n  export default {\n    components: {\n      LazyImage: \"../library/LazyImage.html\"\n    }\n  }\n</script>\n\n<style>\n  ref:root {\n    display: grid;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-gap: 20px;\n  }\n</style>",
    "<div style=\"display: grid; grid-auto-flow: column; grid-column-gap: 20px; grid-auto-columns: 1fr;\">\n  <div>\n      <div class=\"atlas\">\n        <LazyImage src=\"assets/images/grid-size-32x32.png\" alt=\"32 x 32\"/>\n      </div>\n      <div class=\"figcaption\"><b>32 x 32</b> When the grid is too small, the feature visualizations are too small to see.</div>\n  </div>\n  <div>\n      <div class=\"atlas\">\n        <LazyImage src=\"assets/images/grid-size-8x8.png\" alt=\"8 x 8\"/>\n      </div>\n      <div class=\"figcaption\"><b>8 x 8</b> When just right, the activation atlas shows all the concepts with feature visualizations that are big enough to see.</div>\n  </div>\n  <div>\n      <div class=\"atlas\">\n        <LazyImage src=\"assets/images/grid-size-2x2.png\" alt=\"2 x 2\"/>\n      </div>\n      <div class=\"figcaption\"><b>2 x 2</b> When the grid is too big, concepts are lost in the averages. One sees less diversity within related concepts.</div>\n  </div>\n</div>\n\n<script>\n  export default {\n    components: { LazyImage: \"../library/LazyImage.html\" }\n  }\n</script>\n\n<style>\n  .figcaption {\n    margin-top: 8px;\n  }\n</style>",
    "<div style=\"position: relative; background: white; text-align: right;\" on:mouseout=\"set({timerCount: 47})\">\n  <Figure bind:onscreen on:onscreen=\"set({timerCount: 47})\"/>\n\n  <svg style=\"width: 100%;\" viewBox=\"0 0 {width} {height}\">\n    <clipPath id=\"activationGridClipRect\">\n      <rect x={windowX * cellWidth} y={windowY * cellWidth} width={cellWidth} height={cellWidth}/>\n    </clipPath>\n\n    <clipPath id=\"activationGridClipRectInput\">\n      <rect x={windowX * inputCellWidth} y={windowY * inputCellWidth} width={inputCellWidth * windowSize} height={inputCellWidth * windowSize}/>\n    </clipPath>\n\n    <g transform=\"translate(0, 30)\">\n      <!-- 0 -->\n      <g transform=\"translate(0, 0)\">\n        <text class=\"head\" dy=\"-13\">Input image</text>\n        <image xlink:href=\"assets/images/dogcat.jpg\" width={inputWidth} height={inputWidth}/>\n        {#each range(numInputCells) as y}\n          {#each range(numInputCells) as x}\n            <rect \n              on:mouseover=\"set({timerCount: Math.min(numCells - 1, Math.max(0, y - windowSize + 2)) * numCells + Math.min(numCells - 1, Math.max(0, x - windowSize + 2))})\"\n              stroke=\"white\"\n              fill=\"#aaa\" \n              fill-opacity={x >= windowX && x < (windowX + windowSize) && y >= windowY && y < (windowY + windowSize) ? 0.01 : 0.5} \n              stroke-opacity=0.2 stroke-width=1 x={x * (inputCellWidth + cellPadding)} y={y * (inputCellWidth + cellPadding)} \n              width={inputCellWidth} height={inputCellWidth}\n            />\n          {/each}\n        {/each}\n        <rect stroke=\"rgb(255, 170, 0)\" pointer-events=\"none\" stroke-width=2 fill-opacity=0 x={windowX * inputCellWidth} y={windowY * inputCellWidth} width={inputCellWidth * windowSize} height={inputCellWidth * windowSize}/>\n      </g>\n      <!-- 1 -->\n      <g transform=\"translate({inputWidth + columnMargin}, 0)\">\n        <path class=\"arrow\" transform=\"translate(0,{columnWidth / 2})\" d=\"M{-2 * columnMargin / 3},0 L{-columnMargin / 3},0 m-5,-5 l5,5 l-5,5\"/>\n        <text class=\"head\" dy=\"-13\">Image patch</text>\n        <g transform=\"scale({columnWidth / (inputCellWidth * windowSize)})translate(-{windowX * inputCellWidth}, -{windowY * inputCellWidth})\">\n          <image\n            image-rendering=\"pixelated\"\n            xlink:href=\"assets/images/dogcat.jpg\" width={inputWidth} height={inputWidth}\n            clip-path=\"url(#activationGridClipRectInput)\"\n          />\n        </g>\n        <rect stroke=\"rgb(255, 170, 0)\" stroke-width=4 fill-opacity=0 width={columnWidth} height={columnWidth}/>\n        <text class=\"figcaption\" transform=\"translate(0, {columnWidth + 10})\">\n          <tspan x=0 dy=\"1.4em\">Overlapping patches</tspan>\n          <tspan x=0 dy=\"1.4em\">of the input image are</tspan>\n          <tspan x=0 dy=\"1.4em\">evaluated one by one.</tspan>\n        </text>\n      </g>\n      <!-- 2 -->\n      <g transform=\"translate({inputWidth + columnMargin + columnWidth + columnMargin}, 0)\">\n        <path class=\"arrow\" transform=\"translate(0,{columnWidth / 2})\" d=\"M{-2 * columnMargin / 3},0 L{-columnMargin / 3},0 m-5,-5 l5,5 l-5,5\"/>\n        <text class=\"head\" dy=\"-13\">Activations</text>\n      {#each activations[windowX][windowY] as activation, i}\n        {#if i !== activations[windowX][windowY].length - 1}\n        <g transform=\"translate(0,{20 + 20 * (activations[0][0].length - 1)})\">\n          <text transform=\"rotate(90)translate(-7, -25)\" font-size=11>…</text>\n          <line y1=7 y2=7 stroke=\"#eee\" x2={inputWidth * 2 / 3 - 20} />\n        </g>\n        {/if}\n        <g transform=\"translate(0,{i === activations[0][0].length - 1 ? 20 + 20 * (i + 1) : 20 + 20 * i })\">\n          <text font-size=11 fill=\"#999\" dy=>neuron {i === activations[0][0].length - 1 ? 512 : i}:</text>\n          <text text-anchor=\"end\" font-size=11 font-family=\"monospace\" dx={inputWidth * 2 / 3 - 20}>{format(activation)}</text>\n          <line y1=7 y2=7 stroke=\"#eee\" x2={columnWidth} />\n        </g>\n      {/each}\n\n      <text class=\"figcaption\" transform=\"translate(0, {columnWidth + 10})\">\n          <tspan x=0 dy=\"1.4em\">We record a single </tspan>\n          <tspan x=0 dy=\"1.4em\">activation value for each </tspan>\n          <tspan x=0 dy=\"1.4em\">of the 512 neurons.</tspan>\n          <tspan x=0 dy=\"1.4em\">(values shown are mocked)</tspan>\n        </text>\n        \n      </g>\n      <!-- 3 -->\n      <g transform=\"translate({inputWidth + columnMargin + 2 * (columnWidth + columnMargin)}, 0)\">\n        <path class=\"arrow\" transform=\"translate(0,{columnWidth / 2})\" d=\"M{-2 * columnMargin / 3},0 L{-columnMargin / 3},0 m-5,-5 l5,5 l-5,5\"/>\n        <text class=\"head\" dy=\"-13\">Feature visualization</text>\n        <g transform=\"scale({columnWidth / cellWidth})translate(-{windowX * cellWidth}, -{windowY * cellWidth})\">\n          <image \n            image-rendering=\"pixelated\"\n            xlink:href=\"assets/images/dogcat-grid.jpg\" width={inputWidth} height={inputWidth}\n            clip-path=\"url(#activationGridClipRect)\"\n          />\n        </g>\n        <rect stroke=\"#ff6600\" stroke-width=4 fill-opacity=0 width={columnWidth} height={columnWidth}/>\n\n        <text class=\"figcaption\" transform=\"translate(0, {columnWidth + 10})\">\n          <tspan x=0 dy=\"1.4em\">We then produce a  </tspan>\n          <tspan x=0 dy=\"1.4em\">feature visualization</tspan>\n          <tspan x=0 dy=\"1.4em\">and place them on a grid.</tspan>\n        </text>\n      </g>\n      <!-- 4 -->\n      <g transform=\"translate({inputWidth + columnMargin + 3 * (columnWidth + columnMargin)}, 0)\">\n        <path class=\"arrow\" transform=\"translate(0,{columnWidth / 2})\" d=\"M{-2 * columnMargin / 3},0 L{-columnMargin / 3},0 m-5,-5 l5,5 l-5,5\"/>\n        <text class=\"head\" dy=\"-13\">Activation grid</text>\n        <image xlink:href=\"assets/images/dogcat-grid.jpg\" width={inputWidth} height={inputWidth}/>\n        {#each range(numCells) as y}\n          {#each range(numCells) as x}\n            <rect \n              on:mouseover=\"set({timerCount: y * numCells + x})\"\n              stroke=\"#ddd\" \n              fill=\"#aaa\"\n              fill-opacity={y === windowY && x === windowX ? 0.01 : 0.5} \n              stroke-width=1 x={x * (cellWidth + cellPadding)} y={y * (cellWidth + cellPadding)} width={cellWidth} height={cellWidth}\n              />\n          {/each}\n        {/each}\n        <rect stroke=\"#ff6600\" pointer-events=\"none\" stroke-width=2 fill-opacity=0 x={windowX * cellWidth} y={windowY * cellWidth} width={cellWidth} height={cellWidth}/>\n      </g>\n\n    </g>\n\n  </svg>\n</div>\n\n<script>\nimport { range } from \"d3-array\";\nimport { format } from \"d3-format\";\n\nexport default {\n  components: {\n    Figure: \"../components/Figure.html\",\n  },\n  data() {\n    return {\n      paused: true,\n      inputWidth: 250,\n      columnWidth: 150,\n      columnMargin: 50,\n      numCells: 14,\n      cellPadding: 0,\n\n      windowSize: 3,\n      windowX: 0,\n      windowY: 0,\n\n      activations: range,\n\n      timerCount: 47\n\n    };\n  },\n  computed: {\n    width: ({inputWidth, columnWidth, columnMargin}) => inputWidth * 2 + columnWidth * 3 + 4 * columnMargin,\n    height: ({inputWidth}) => inputWidth + 40,\n    clippedCount: ({timerCount, numCells}) => Math.round(timerCount) % (numCells * numCells),\n    windowX: ({clippedCount, numCells}) => clippedCount % numCells,\n    windowY: ({clippedCount, numCells}) => Math.floor(clippedCount / numCells),\n    cellWidth: ({inputWidth, numCells, cellPadding}) => (inputWidth + cellPadding) / numCells - cellPadding,\n    numInputCells: ({numCells, windowSize}) => numCells + windowSize - 1,\n    inputCellWidth: ({inputWidth, numInputCells, cellPadding}) => (inputWidth + cellPadding) / numInputCells - cellPadding,\n    activations: ({numCells}) => range(numCells).map(i => range(numCells).map( i => range(6).map(i => Math.random() - 0.5)))\n  },\n  helpers: {\n    range: range,\n    format: format(\" .5f\")\n  }\n}\n</script>\n\n<style>\n.head {\n  font-size: 14px;\n  font-weight: 600;\n  text-transform: uppercase;\n}\n.arrow {\n  fill: none;\n  stroke: black;\n}\n.figcaption {\n  fill: rgba(0, 0, 0, 0.6);\n  font-size: 14px;\n}\n</style>",
    "<div class=\"base-grid\">\n  <div ref:controls style=\"grid-column: text;\">\n    <label>Grid size: </label>\n    <label><input type=radio bind:group=gridSize value={0}> 20x20</label>\n    <label><input type=radio bind:group=gridSize value={1}> 40x40</label>\n    <label><input type=radio bind:group=gridSize value={2}> 80x80</label>\n    <label><input type=radio bind:group=gridSize value={3}> 160x160</label>\n\n    <label style=\"float: right;\"><input type=checkbox bind:checked=showLabels> attribution labels</label>\n  </div>\n</div>\n\n\n<div class=\"atlas\" style=\"grid-column: screen;\">\n  <ResponsiveResizer {clientWidth} {clientHeight} minWidth={1000}>\n    <Atlas ref:atlas id=\"inceptionv1_{layerName}\" bind:gridSize bind:showLabels scaleCountFactor=200 {iconCrop} disableBehaviors={true}/>\n  </ResponsiveResizer>\n</div>\n\n<script>\nexport default {\n  components: { \n    Atlas: \"../Atlas.html\",\n    ResponsiveResizer: \"../library/ResponsiveResizer.html\"\n  },\n  data() {\n    return {\n      layerName: \"mixed4c\",\n      gridSize: 1,\n      iconCrop: 0.4,\n    }\n  },\n  oncreate() {\n    setTimeout(() => {\n      this.refs.atlas.home();\n    }, 100)\n  },\n  onupdate({changed, current, previous}) {\n\n  }\n}\n</script>\n\n<style>\n  ref:controls {\n    font-size: 12px;\n  }\n  input {\n    margin-left: 8px;\n  }\n  .atlas {\n    position: relative;\n    height: calc(100vw - 40px);\n    margin: 20px;\n  }\n  .column {\n    position: relative;\n    height: 300px;\n  }\n</style>",
    "\n\n<div style=\"display: grid; grid-gap: 20px; grid-template-columns: 1fr 120px;\">\n  <div class=\"detail\">\n    <Atlas \n      ref:atlas\n      id=\"inceptionv1_{layerName}\" \n      bind:gridSize\n      bind:homeX \n      bind:homeY \n      bind:homeScale\n      bind:aspectRatio\n      bind:scale\n      bind:extent\n      bind:showLabels\n      textShadow={true}\n      backgroundColor=\"#dfdfdf\"\n    />\n  </div>\n  <div>\n    <div class=\"atlas\">\n      <img src=\"assets/images/renders/thumbnail-{layerName}.jpg\" alt=\"thumbnail for {layerName}\">\n      <AtlasReticle\n        bind:extent\n        on:drag=\"refs.atlas.translateTo(event.gcx, event.gcy)\"\n      />\n    </div>\n    <div class=\"controls\">\n      <Button backgroundColor=\"rgb(245, 245 ,245)\" on:click=\"refs.atlas.home(2000)\"><Navigation name=\"home\" color=\"rgb(100, 100, 100)\"/></Button>\n      <Button backgroundColor=\"rgb(245, 245 ,245)\" on:click=\"refs.atlas.scaleBy(2)\"><Navigation name=\"add\" color=\"rgb(100, 100, 100)\"/></Button>\n      <Button backgroundColor=\"rgb(245, 245 ,245)\" on:click=\"refs.atlas.scaleBy(0.5)\"><Navigation name=\"remove\" color=\"rgb(100, 100, 100)\"/></Button>\n    </div>\n  </div>\n</div>\n<script>\nexport default {\n  components: {\n    Button: \"../library/Button.html\",\n    Navigation: \"../library/icons/Navigation.html\",\n    Atlas: \"../Atlas.html\",\n    AtlasReticle: \"../AtlasReticle.html\"\n  },\n  data() {\n    return {\n      layerName: \"mixed4c\",\n      gridSize: 2,\n      homeScale: 14,\n      showLabels: true\n    }\n  }\n}\n</script>\n\n<style>\n  .atlas {\n    margin-top: 1px;\n    position: relative;\n    width: 120px;\n    height: 120px;\n  }\n  .detail {\n    height: 300px;\n  }\n  img {\n    display: block;\n    width: 100%;\n    opacity: 0.4;\n  }\n  .controls {\n    margin-top: 16px;\n  }\n</style>",
    "<Radar bind:ready>\n<div class=\"showapath\">  \n  <div class=\"arrow\">\n  {#if ready}\n      <SetOfIcons\n        {pointList}\n        {color}\n        {layerName}\n      />\n    {/if}\n  </div>\n  <div class=\"atlas\">\n    <div class=\"thumbnail\">\n      <LazyImage background={false} border={false} aspectRatio={1} src=\"assets/images/renders/thumbnail-{layerName}.jpg\" alt=\"thumbnail for {layerName}\" style=\"width: 100%;display: block;\" />\n    </div>\n    <svg \n      viewBox=\"0 0 {viewWidth} {viewHeight}\"\n      class=\"pathArrow\"\n      >\n      <defs>\n        <marker \n          id={'head' + uniqueId}\n          fill={color}\n          viewBox=\"0 0 10 10\" \n          refX=\"5\" \n          refY=\"5\"\n          markerWidth=\"5\" \n          markerHeight=\"5\"\n          orient=\"auto-start-reverse\"\n        >\n          <circle cx=\"5\" cy=\"5\" r=\"3\"/>\n        </marker>\n        <marker id={'arrow' + uniqueId}\n          fill={color} \n          viewBox=\"0 0 10 10\" \n          refX=\"5\" \n          refY=\"5\"\n          markerWidth=\"3\"\n          markerHeight=\"3\"\n          orient=\"auto-start-reverse\"\n        >\n          <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n        </marker>\n      </defs>\n      <path\n        ref:clickPath\n        d={path_d}\n        stroke={color}\n        stroke-width=\"3\"\n        fill=\"transparent\"\n        marker-end=\"url(#{'arrow' + uniqueId})\"\n        marker-start=\"url(#{'head' + uniqueId})\"\n      />\n    </svg>\n  </div>\n</div>\n</Radar>\n<script>\nexport default {\n  components: { \n    Radar: \"../library/Radar.html\",\n    SetOfIcons: \"../SetOfIcons.html\",\n    LazyImage: \"../library/LazyImage.html\"\n  },\n  data() {\n    return {\n      gridSize: 1,\n      viewWidth: 160,\n      viewHeight: 160,\n      height: 160,\n      color: '#ff6600',\n      uniqueId: Math.random(),\n      pointList: []\n    }\n  },\n  computed: {\n    numIcons: ({pointList}) => pointList.length,\n    edgeLength: ({viewWidth, viewHeight}) => {\n      if(viewWidth && viewHeight){\n        return Math.min(viewWidth, viewHeight)\n      }\n      return 0\n    },\n    topLeft: ({viewWidth, viewHeight, edgeLength}) => {\n      if(viewWidth && viewHeight){\n        return [(viewWidth - edgeLength) / 2, (viewHeight - edgeLength) / 2]\n      }\n      return [0,0]\n    },\n    path_d: ({pointList, topLeft, edgeLength}) => {\n      // need to adjust for size\n      let path_d = [];\n      let d = \"M\";\n      pointList.forEach(function(point){\n          d = d + (point[0]) * edgeLength  + \n            \" \" + (point[1]) * edgeLength + \" L\"\n      });\n      path_d.push(d.substring(0, d.length - 2))\n      return path_d\n    },\n  },\n}\n</script>\n\n<style>\n\nsvg {\n  position: absolute;\n  pointer-events: none;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n}\n.thumbnail {\n  opacity: .2;\n  position: relative;\n}\n.atlas {\n  position: relative;\n  max-width: 120px;\n  margin-top: 16px;\n}\n.pathArrow {\n  opacity: 1;\n}\n.column {\n  position: relative;\n}\n.set-of-icons {\n  position: relative;\n}\n@media(min-width: 600px) {\n  .showapath {\n    display: grid; grid-template-columns: 1fr 120px; \n    grid-gap: 20px;\n  }\n  .atlas {\n    margin: 0;\n  }\n}\n</style>",
    "\n\n<div class=\"root\">\n  <div class=\"atlas\">\n    <LazyImage src=\"assets/images/renders/layers-{subject}-{index}.jpg\" aspectRatio={4/3} border={false} />\n  </div>\n\n  <div class=\"thumbnail\">\n    <div style=\"position: relative;\">\n      <div style=\"opacity: 0.4;\">\n        <LazyImage border={false} background={false} src=\"assets/images/renders/thumbnail-{layerName}.jpg\" alt=\"thumbnail for {layerName}\" />\n      </div>\n      <AtlasReticle\n        aspectRatio={4/3}\n        scale={homeScale}\n        gcx={homeX}\n        gcy={homeY}\n        enableDragging={false}\n      />\n    </div>\n  </div>\n\n  <div class=\"figcaption\">\n    {@html caption}\n  </div>\n</div>\n<script>\nexport default {\n  components: { \n    LazyImage: \"../library/LazyImage.html\",\n    AtlasReticle: \"../AtlasStaticReticle.html\"\n  },\n  data() {\n    return {\n      caption: \"\",\n      layerName: \"mixed4c\",\n      gridSize: 3,\n      homeScale: 16 * 3,\n      showLabels: true\n    }\n  }\n}\n</script>\n\n<style>\n\n  .thumbnail {\n    position: relative;\n    margin: 20px auto;\n    max-width: 100px;\n  }\n  @media(min-width: 800px) {\n    .thumbnail {\n      margin: 0 20px 0 0;\n      grid-area: 2/auto/2/3;\n    }\n    .figcaption {\n      /* grid-area: 2/auto/1/2; */\n    }\n    .root {\n      display: grid;\n      grid-template-columns: 2fr 1fr;\n      grid-template-rows: 1fr auto;\n      grid-gap: 20px;\n    }\n    .atlas {\n      grid-area: 1/1/1/3;\n      border-radius: 8px;\n      overflow: hidden;\n    }\n  }\n</style>",
    "\n<div class=\"root\">\n  <div class=\"main\">\n    <LazyImage border={false} background={false} src=\"assets/images/renders/focus-1-1.jpg\" />\n    <AtlasReticle\n      aspectRatio=1\n      scale={$focus1Highlight.scale}\n      gcx={$focus1Highlight.x}\n      gcy={$focus1Highlight.y}\n      background={false}\n      round={true}\n      enableDragging={false}\n    />\n  </div>\n  <div class=\"detail\">\n    <Loupe>\n      <LazyImage border={false} background={false} src=\"assets/images/renders/focus-1-2.jpg\" />\n    </Loupe>\n  </div>\n  <div class=\"figcaption\">When we map opacity to the amount that each activation contributes to \"fireboat\" in the layer mixed5b, we see a main cluster of icons showing red boats and splashing, spraying water. While there are some stray areas elsewhere, it seems that this is region of the atlas that is dedicated specifically to classifying red boats with splashing water nearby.</div>\n</div>\n\n<script>\n  export default {\n    components: {\n      LazyImage: \"../library/LazyImage.html\",\n      AtlasReticle: \"../AtlasStaticReticle.html\",\n    Loupe: \"../components/Loupe.html\"\n    }\n  }\n</script>\n\n\n<style>\n  .root {\n    max-width: 1000px;\n    grid-column: page;\n    padding: 0 20px;\n    \n  }\n  .main {\n    grid-area: main;\n    position: relative;\n  }\n  .detail {\n    grid-area: detail;\n    position: relative;\n  }\n  .figcaption {\n    margin-top: 20px;\n    grid-area: caption;\n  }\n  @media(min-width: 500px) {\n    .root {\n      display: grid;\n      grid-gap: 20px;\n      grid-template-columns: 2fr 1fr;\n      grid-template-rows: 1fr auto;\n      grid-template-areas: \n        \"main main\"\n        \"detail caption\";\n    }\n\n  }\n\n  @media(min-width: 700px) {\n    .root {\n      margin: 0 auto;\n      grid-row-gap: 0;\n      grid-template-columns: 2fr 1fr;\n      grid-template-rows: 1fr 1fr;\n      grid-template-areas: \n        \"main detail\"\n        \"main caption\";\n    }\n\n  }\n</style>",
    "\n<div class=\"root\">\n  <div class=\"main\">\n    <LazyImage border={false} background={false} src=\"assets/images/renders/focus-2-1.jpg\" />\n    <AtlasReticle\n      aspectRatio=1\n      annotationValue=\"3\"\n      extent={\n        [\n          [$focusHighlights[0].x, $focusHighlights[0].y],\n          [$focusHighlights[0].x + 0.1, $focusHighlights[0].y + 0.1]\n        ]\n      }\n      scale={$focusHighlights[0].scale}\n      gcx={$focusHighlights[0].x}\n      gcy={$focusHighlights[0].y}\n      background={false}\n      round={true}\n      enableDragging={false}\n    />\n    <AtlasReticle\n      aspectRatio=1\n      annotationValue=\"2\"\n      scale={$focusHighlights[1].scale}\n      gcx={$focusHighlights[1].x}\n      gcy={$focusHighlights[1].y}\n      background={false}\n      round={true}\n      enableDragging={false}\n    />\n    <AtlasReticle\n      aspectRatio=1\n      annotationValue=\"1\"\n      scale={$focusHighlights[2].scale}\n      gcx={$focusHighlights[2].x}\n      gcy={$focusHighlights[2].y}\n      background={false}\n      round={true}\n      enableDragging={false}\n    />\n  </div>\n  <div class=\"detail\">\n    <div class=\"loupe\">\n      <Loupe label={1}>\n        <LazyImage border={false} background={false} src=\"assets/images/renders/focus-2-4.jpg\" />\n      </Loupe>\n    </div>\n    <div class=\"loupe\">\n      <Loupe label={2}>\n        <LazyImage border={false} background={false} src=\"assets/images/renders/focus-2-3.jpg\" />\n      </Loupe>\n    </div>\n    <div class=\"loupe\">\n      <Loupe label={3}>\n        <LazyImage border={false} background={false} src=\"assets/images/renders/focus-2-2.jpg\" />\n      </Loupe>\n    </div>\n    <div class=\"figcaption\">In mixed4d we see we see the attribution toward \"fireboat\" is high in several clusters located in different positions around the atlas. One is very focused on windows, another on geysers and splashing water, and yet another on crane-like objects.</div>\n  </div>\n</div>\n\n<script>\n  export default {\n    components: {\n      LazyImage: \"../library/LazyImage.html\",\n      AtlasReticle: \"../AtlasStaticReticle.html\",\n    Loupe: \"../components/Loupe.html\"\n    }\n  }\n</script>\n\n\n<style>\n  .loupe {\n    margin: 20px;\n  }\n  .root {\n    padding: 0 20px;\n    box-sizing: border-box;\n  }\n  .main {\n    position: relative;\n    box-sizing: border-box;\n  }\n  @media(min-width: 500px) {\n      .detail {\n        position: relative;\n        display: grid;\n        align-items: center;\n        /* grid-gap: 30px; */\n        grid-template-columns: 1fr 1fr;\n        grid-template-rows: 1fr 1fr;\n      }\n      .figcaption {\n        max-width: 180px;\n        margin: 0 auto;\n      }\n  }\n  \n  @media(min-width: 800px) {\n      .root {\n        max-width: 1000px;\n        margin: 1em auto;\n        display: grid;\n        grid-template-columns: 1fr 1fr;\n      }\n      \n  }\n</style>",
    "\n<div class=\"root\">\n  <h4>Activations for Fireboat</h4>\n  <div class=\"main\">\n    <LazyImage border={false} background={false} src=\"assets/images/renders/focus-2-1.jpg\" />\n    {#each $focusHighlights as h, i}\n      <AtlasReticle\n        aspectRatio=1\n        annotationValue={i + 1}\n        scale={h.scale}\n        gcx={h.x}\n        gcy={h.y}\n        background={false}\n        round={true}\n        enableDragging={false}\n      />\n    {/each}\n  </div>\n  <h4>Activations for Streetcar</h4>\n  <div class=\"main\">\n    <LazyImage border={false} background={false} src=\"assets/images/renders/focus-3-1.jpg\" />\n    {#each $focusHighlights as h, i}\n      <AtlasReticle\n        color=\"#ffaa00\"\n        aspectRatio=1\n        annotationValue={i + 1}\n        scale={h.scale}\n        gcx={h.x}\n        gcy={h.y}\n        background={false}\n        round={true}\n        enableDragging={false}\n      />\n    {/each}\n  </div>\n</div>\n\n<script>\n  export default {\n    components: {\n      LazyImage: \"../library/LazyImage.html\",\n      AtlasReticle: \"../AtlasStaticReticle.html\",\n    }\n  }\n</script>\n\n\n<style>\n  .root {\n    max-width: 1000px;\n    margin: 1em auto;\n    padding: 0 20px; \n\n  }\n  .main {\n    position: relative;\n    margin-bottom: 16px;\n  }\n  h4 {\n    border-bottom: solid 1px rgba(0, 0, 0, 0.1);\n    padding-bottom: 8px;\n    margin-top: 0;\n  }\n  @media(min-width: 600px) {\n    .root {\n      display: grid;\n      grid-gap: 20px;\n      grid-template-columns: 1fr 1fr;\n      grid-auto-flow: column;\n      grid-template-rows: auto 1fr;\n    }\n    .main {\n      margin: 0;\n    }\n  }\n</style>",
    "\n<div class=\"root\">\n\n    <h4 style=\"width:{loupeSize}px\">Fireboat</h4>\n    {#each $focusHighlights as h, i}\n    <div class=\"loupe\">\n      <Loupe label={i + 1}>\n        <LazyImage\n          border={false}\n          background={false}\n          src=\"assets/images/renders/focus-2-{i + 2}.jpg\" />\n      </Loupe>\n    </div>\n    {/each}\n\n    <h4 style=\"width:{loupeSize}px\">Streetcar</h4>\n    {#each $focusHighlights as h, i}\n    <div class=\"loupe\">\n      <Loupe\n        label={i + 1}\n        color=\"#ffaa00\">\n        <LazyImage\n          border={false}\n          background={false}\n          src=\"assets/images/renders/focus-3-{i + 2}.jpg\" />\n      </Loupe>\n    </div>\n    {/each}\n\n    <div></div>\n    <div class=\"figcaption\">\n      At mixed4d, Both \"streetcar\" and \"fireboat\" contain activations for what look like windows.\n    </div>\n    <div class=\"figcaption\">\n      Both classes contain activations for crane-like apparatuses, though they are less prominent than the window activations.\n    </div>\n    <div class=\"figcaption\">\n      \"Fireboat\" activations have much stronger attributions from water than \"streetcar\", where there is virtually no positive evidence.\n    </div>\n    <div class=\"figcaption\">\n      The activations for \"streetcar\" have much stronger attributions from buildings than does \"fireboat\". \n    </div>\n\n</div>\n\n<script>\n  export default {\n    components: {\n      LazyImage: \"../library/LazyImage.html\",\n      Loupe: \"../components/Loupe.html\"\n    }\n  }\n</script>\n\n\n<style>\n  .main {\n    position: relative;\n  }\n  .root {\n    display: grid;\n    grid-auto-flow: column;\n    grid-template-columns: 1fr 1fr 1fr;\n    grid-template-rows: auto auto auto auto auto;\n    padding: 0 20px;\n    align-items: center;\n  }\n  .loupe {\n    padding: 20px;\n    align-self: start;\n  }\n  h4 {\n    align-self: center;\n    text-align: center;\n    border-bottom: solid 1px rgba(0, 0, 0, 0.2);\n    padding-bottom: 8px;\n  }\n  .figcaption {\n    margin-bottom: 16px;\n  }\n  @media(min-width: 800px) {\n    h4 {\n      text-align: left;\n    }\n    .figcaption {\n      max-width: 180px;\n      margin: 0 auto;\n      padding: 0 8px;\n      box-sizing: border-box;\n    }\n    .root {\n      max-width: 1000px;\n      margin: 0 auto;\n      display: grid;\n      grid-auto-flow: row;\n      grid-row-gap: 8px;\n      grid-template-columns: 100px 1fr 1fr 1fr 1fr;\n      align-items: start;\n    }\n  }\n</style>",
    "\n<!-- <h4>\n  Average of ten patches applied to 1,000 training set examples\n</h4>\n\n<p>Previously correctly classified images that the patch changed to the target class.\n\nMean change in probabilty assigned to the target class. </p> -->\n\n{#each methods as method}\n  {#if method == \"dynamic\"}\n  <h4>Dynamic corner position</h4>\n  {:else}\n  <h4>Consistent corner position</h4>\n  {/if}\n  <div class=\"method details\">\n    <table>\n      <thead>\n      <tr>\n        <th>\n          {#if method == \"static\"}\n          <div class=\"description\">\n            <img src=\"assets/icon-static.png\" alt=\"icon\">\n            <div>\n              <div class=\"figcaption\">Choosing a consistent size and corner position across all examples.</div>\n            </div>\n          </div>\n        {:else}\n          <div class=\"description\">\n            <img src=\"assets/icon-dynamic.png\" alt=\"icon\">\n            <div>\n              <div class=\"figcaption\">Choosing the strongest size and corner position for each example.</div>\n            </div>\n          </div>\n        {/if}\n        \n        </th>\n        <th colspan=\"2\">\n          <div class=\"title\">Success rate</div>\n          {#if method == \"dynamic\"}\n            <div class=\"explanation figcaption\">Previously correctly classified images that the patch changed to the target class.</div>\n          {/if}\n        </th>\n        <th colspan=\"2\">\n          <div class=\"title\">Probability change</div>\n          {#if method == \"dynamic\"}\n            <div class=\"explanation figcaption\">Mean probability assigned to the target class before and after patch.</div>\n          {/if}\n        </th>\n      </tr>\n    </thead>\n    <tbody>\n    {#each comparisons as comparison}\n      <tr>\n        <td>\n          {@html $inceptionLabels[comparison.comparison[0]] + \" → \" + $inceptionLabels[comparison.comparison[1]]}\n        </td>\n        <td>{@html fp(comparison.totals[method][2])}</td>\n        <td>{@html fi(comparison.totals[method][0])} / {@html fi(comparison.totals[method][1])}</td>\n        <td>{@html fpp(comparison.totals[method][5])}</td>\n        <td>{@html fp(comparison.totals[method][3])} → {@html fp(comparison.totals[method][4])}</td>\n      </tr>\n      {/each}\n    </tbody>\n    \n    </table>\n  </div>\n\n{/each}\n\n<!-- <div>{comparison.name}</div> -->\n<h4>\n  details for each patch tested\n</h4>\n\n<!-- <div class=\"controls\">\n\n</div> -->\n\n<div class=\"method\">\n  <!-- <div class=\"method-description\">\n    <div>\n    {#if method == \"static\"}\n      <div>\n        <p class=\"figcaption\">Choosing <strong>a consistent</strong> size and corner position across all examples.</p>\n        <img src=\"assets/icon-static.png\" alt=\"icon\" style=\"width: initial;\">\n      </div>\n    {:else}\n      <div>\n        <p class=\"figcaption\">Choosing <strong>the strongest</strong> size and corner position for each example.</p>\n        <img src=\"assets/icon-dynamic.png\" alt=\"icon\" style=\"width: initial;\">\n      </div>\n    {/if}\n    </div>\n  </div> -->\n\n  <table>\n    <thead>\n      <tr>\n        <th>\n          <div class=\"controls\">\n            <select bind:value=\"selectedComparison\">\n              {#each comparisons as comparison, i}\n                <option value={i}>{$inceptionLabels[comparison.comparison[0]]} → {$inceptionLabels[comparison.comparison[1]]}</option>\n              {/each}\n            </select>\n\n            <select bind:value=\"selectedMethod\">\n              {#each methods as method, i}\n                <option value={i}>\n                  {#if i === 0}\n                    Strongest size and corner position \n                  {:else}\n                    Consistent size and corner position \n                  {/if}\n                </option>\n              {/each}\n            </select>\n          </div>\n\n        \n        </th>\n        <th colspan=\"2\">\n          <div class=\"title\">Success rate</div>\n        </th>\n        <th colspan=\"2\">\n          <div class=\"title\">Probability change</div>\n        </th>\n      </tr>\n    </thead>\n\n    <!-- <tr>\n      <td>\n        average of all patches\n      </td>\n      <td>{@html fp(c.totals[method][2])}</td>\n      <td>{@html fi(c.totals[method][0])} / {@html fi(c.totals[method][1])}</td>\n      <td>{@html fpp(c.totals[method][5])}%</td>\n      <td>{@html f1(c.totals[method][3])}% → {@html f1(c.totals[method][4])}%</td>\n    </tr> -->\n    {#each c.patches as patch, p}\n      <tr>\n        <td>\n          <img src=\"assets/images/patches/{c.name}-{format(p + 1)}.png\" alt=\"patch {p}\"/>\n          <div>{@html \"Patch \" + format(p + 1)}</div>\n        </td>\n        <td>{@html patch[method][2]}%</td>\n        <td>{@html patch[method][0]} / {@html patch[method][1]}</td>\n        <td>{@html patch[method][5]}%</td>\n        <td>{@html patch[method][3]}% → {@html patch[method][4]}%</td>\n      </tr>\n    {/each}\n    <tr>\n      <td>\n        <img src=\"assets/images/patches/random.png\" alt=\"patch {p}\"/>\n        <div>Random noise</div>\n      </td>\n      <td>{@html c.noise[method][2]}%</td>\n      <td>{@html c.noise[method][0]} / {@html c.noise[method][1]}</td>\n      <td>{@html c.noise[method][5]}%</td>\n      <td>{@html c.noise[method][3]}% → {@html c.noise[method][4]}%</td>\n    </tr>\n\n  </table>\n\n</div>\n\n\n\n<script>\nimport Patches from '../Patches.js';\nimport {format} from \"d3-format\";\n\nPatches.forEach(comparison => {\n  comparison.totals = {};\n  [\"dynamic\", \"static\"].forEach(method => {\n    let totals = [0, 0, 0, 0, 0, 0];\n    comparison.patches.forEach(patch => {\n      totals[0] += +patch[method][0];\n      totals[1] += +patch[method][1];\n      totals[3] += +patch[method][3];\n      totals[4] += +patch[method][4];\n    });\n    totals[2] = totals[0] / totals[1]\n    totals[3] = totals[3] / comparison.patches.length / 100\n    totals[4] = totals[4] / comparison.patches.length / 100\n    totals[5] = totals[4] - totals[3];\n    comparison.totals[method] = totals\n  });\n});\n\n// console.log(Patches)\n\nexport default {\n  data() {\n    return {\n      methods: [\n        \"dynamic\", \"static\"\n      ],\n      comparisons: Patches,\n      selectedComparison: 0,\n      selectedMethod: 0,\n    }\n  },\n  computed: {\n    c: ({selectedComparison, comparisons}) => comparisons[selectedComparison],\n    method: ({selectedMethod, methods}) => methods[selectedMethod]\n  },\n  helpers: {\n    f1: format(\".1f\"),\n    fi: format(\",\"),\n    fp: format(\".1%\"),\n    fpp: format(\"+.1%\"),\n    format(n) {\n      if (n < 10) {\n        return \"0\" + n;\n      } else {\n        return n;\n      }\n    }\n  }\n}\n\n</script>\n\n<style>\nh4 {\n  margin-bottom: 8px;\n  padding-bottom: 10px;\n  border-bottom: solid 1px rgba(0, 0, 0, 0.1);\n  margin-top: 0;\n}\n.controls {\n  margin-bottom: 8px;\n}\nselect {\n  width: 100%;\n  max-width: 220px;\n}\n  .description {\n    display: grid;\n    grid-template-columns: 40px 1fr;\n    grid-gap: 20px;\n    /* margin-bottom: 8px; */\n    /* font-style: italic; */\n  }\n  .method table .description img {\n    width: 40px;\n    height: 40px;\n    margin-top: 4px;\n    display: block;\n  }\n  .method h5 {\n    margin-top: 0;\n    margin-bottom: 0.5em;\n  }\n\n  .method table {\n    line-height: 1.3em;\n    flex: 1 1 auto;\n    width: 100%;\n    margin-bottom: 3em;\n    border-bottom: none;\n    font-variant-numeric: tabular-nums;\n  }\n  .method table img {\n    display: block;\n    width: 40px;\n    height: 40px;\n  }\n\n  .method table th,\n  .method table td {\n    font-size: 14px;\n  }\n\n  .method th {\n    vertical-align: bottom;\n    border-bottom: none;\n    padding-bottom: 10px;\n  }\n  .method .title {\n    /* text-transform: uppercase; */\n    /* font-weight: 500; */\n  }\n  .method td {\n    vertical-align: middle;\n    padding-top: 6px;\n    padding-bottom: 6px;\n  }\n  .explanation {\n    /* font-weight: normal;\n    font-size: 12px;\n    color: grey; */\n  }\n  .method th .figcaption {\n    font-weight: normal;\n    line-height: 1.6em;\n  }\n  .method table th:nth-child(1) {\n    padding-left: 0;\n    vertical-align: top;\n  }\n\n  .method table td:nth-child(1) {\n    display: grid;\n    grid-template-columns: 40px 1fr;\n    grid-gap: 10px;\n    align-items: center;\n    padding: 0;\n  }\n  .method.details table td:nth-child(1) {\n    display: table-cell;\n    /* text-align: right; */\n  }\n\n  .method table td:nth-child(2) {\n    text-align: right;\n  }\n\n  .method table td:nth-child(2),\n  .method table td:nth-child(4) {\n    text-align: right;\n    width: 45px;\n  }\n\n  .method table td:nth-child(3),\n  .method table td:nth-child(5) {\n    color: grey;\n    font-weight: 200;\n    font-size: 12px;\n    width: 20%;\n  }\n\n\n  .method table td:nth-child(5) {\n    color: grey;\n  }\n\n\n\n  \n\n</style>\n",
    "<div>\n  <span>Loading …</span>\n</div>\n\n<style>\ndiv {\n  display: table;\n  text-align: center;\n  color: rgba(0, 0, 0, 0.3);\n  font-size: 12px;\n  line-height: 100%;\n  height: 100%;\n  width: 100%;\n}\nspan {\n  display: table-cell;\n  vertical-align: middle;\n}\n</style>",
    "<div class=\"root\" style=\"display: {display}; padding-bottom: {100 / aspectRatio}%\">\n  <div class=\"container\">\n    <slot></slot>\n  </div>\n</div>\n\n<script>\n  export default {\n    data() {\n      return {\n        display: \"block\",\n        aspectRatio: 1,\n        clientWidth: 0,\n        \n      }\n    },\n    computed: {\n      // width: ({clientWidth}) => clientWidth,\n      // height: ({width, aspectRatio}) => width / aspectRatio\n    }\n  }\n</script>\n\n<style>\n.root {\n  position: relative;\n  box-sizing: border-box;\n}\n.container {\n  position: absolute;\n  box-sizing: border-box;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n}\n</style>",
    "<svelte:window on:resize=\"measure()\" />\n<Radar bind:ready />\n\n\n{#if ready}\n  <AtlasDataLoader \n    {id} \n    {layer} \n    {layout}\n    {classFilter}\n    {filter}\n    bind:config\n    bind:layers \n    bind:labels \n    bind:loading\n  />\n{/if}\n\n<div ref:root\n>\n  <D3Zoom ref:d3Zoom\n    clientWidth={viewWidth}\n    clientHeight={viewHeight}\n    bind:scale\n    bind:translateX\n    bind:translateY\n    bind:mouseOver\n    bind:mouseGlobalPosition\n    bind:extent\n    bind:scrollWheel\n    bind:disableBehaviors\n    bind:gcx\n    bind:gcy\n    {homeX}\n    {homeY}\n    {homeScale}\n  >\n    <canvas ref:canvas\n      width={viewWidth * screenResolution}\n      height={viewHeight * screenResolution}\n    ></canvas>\n    <canvas ref:labelsCanvas\n      width={viewWidth * screenResolution}\n      height={viewHeight * screenResolution}\n    ></canvas>\n    {#if showHoverIcon}\n    <div ref:hover\n      style=\"left: {hoverIconX}px; top: {hoverIconY}px; width: {hoverIconW}px; height: {hoverIconW}px;\"\n    ></div>\n    {/if}\n  </D3Zoom>\n</div>\n\n<script>\nimport { default as load } from './library/load.js';\nimport { max } from 'd3-array';\n\nexport default {\n  components: { \n    AtlasDataLoader: './AtlasDataLoader.html', \n    D3Zoom: './library/D3Zoom.html',\n    Radar: './library/Radar.html'\n  },\n  data() {\n    return {\n      ready: true,\n      id: \"inceptionv1_mixed4c\",\n\n      // viewWidth: 500,\n      // viewHeight: 500,\n      \n      config: null,\n      layers: null,\n\n      layer: 0,\n      layout: 0,\n      classFilter: 0,\n      filter: 0,\n\n      context: null,\n\n      alphaAttributionFactor: 0.02,\n      density: 1.0,\n      classHeatmap: -1,\n      classHeatmapMultiplier: 1,\n      classHeatmapPositive: 1,\n      iconCrop: 0.02,\n      autoGridSizeMultiplier: 0.5,\n\n      gridSize: null,\n\n      // for initial state, and going back to \"home\"\n      homeX: .5,\n      homeY: .5,\n      homeScale: 1,\n\n      // turn off features\n      enableClickToZoom: true,\n      enableHover: true,\n      enableDragToPan: true,\n\n      // Styling\n      backgroundColor: \"white\",\n      strokeColor: \"rgb(220, 220, 220)\",\n      strokeThickness: 1,\n      imageSmoothing: false,\n      fontSize: 10,\n      textColor: \"white\",\n      textShadowColor: \"rgba(0, 0, 0, 0.6)\",\n      showLabels: true,\n\n      screenResolution: 1,\n    }\n  },\n  computed: {\n    maxAttributionValue: ({layers, layer}) => {\n      if (layers == null) return 0;\n      const l = layers[layer];\n      let max = 0;\n      l.forEach(x => {\n        x.forEach(y => {\n          if (y && y.num_activations > 500) {\n            const v = y.full_class_values[0];\n            if (v > max) max = v;\n          }\n        })\n      })\n      return max;\n    },\n    w: ({viewWidth, screenResolution}) => viewWidth * screenResolution,\n    h: ({viewHeight, screenResolution}) => viewHeight * screenResolution,\n    currentZoomIndex: ({scale, gridSize, config, classHeatmap, w, h, autoGridSizeMultiplier}) => {\n      let s = 0;\n      if (gridSize > -1) {\n        s = +gridSize\n      } else {\n        const size = Math.max(w, h);\n        const optimalNumIcons = ((size * scale) / 80) / autoGridSizeMultiplier;\n        const snapToGrid = Math.floor(Math.sqrt(optimalNumIcons / 20));\n        s = snapToGrid;\n      }\n      // Make sure we don't overrun our data\n      if (config) {\n        s = Math.min(config.grid_size.length - 1 , s);\n      }\n      // Class heatmap only has data up to level 2\n      if (classHeatmap > -1) {\n        s = Math.min(2, s);\n      }\n      return s;\n\n    },\n    // visibleLayers: ({currentZoomIndex}) => {\n    //   return [{i: currentZoomIndex, opacity: 1}];\n    // },\n    currentLayerData: ({currentZoomIndex, layers}) => {\n      return layers ? layers[currentZoomIndex] : [[]]\n    },\n    labelsBuffer: ({labelsBufferContext, labels, fontSize, textColor, textShadowColor}) => {\n      // console.log(labelsBufferContext, labels);\n    \n      if (labelsBufferContext && labels) {\n        labelsBufferContext.globalAlpha = 1.0;\n        labelsBufferContext.font=fontSize + \"px Helvetica\";\n        labels.forEach((label, i) => {\n          // if (textShadow) {\n          labelsBufferContext.lineWidth = 3;\n          labelsBufferContext.lineJoin = \"round\"\n          labelsBufferContext.strokeStyle = textShadowColor;\n          labelsBufferContext.strokeText(label, (i % 10) * 150 + 10, Math.floor(i / 10 + 1) * 20, 80, 15);\n          // }\n          labelsBufferContext.fillStyle = textColor;\n          labelsBufferContext.fillStyle = textColor;\n          labelsBufferContext.fillText(label, (i % 10) * 150 + 10, Math.floor(i / 10 + 1) * 20, 80, 15);\n                        \n        });\n      }\n    },\n    showHover: ({hoverIconData, mouseGlobalPosition}) => mouseGlobalPosition && hoverIconData && hoverIconData.gcx,\n    hoverIconData: ({currentLayerData, config, mouseGlobalPosition, w, h, translateX, translateY}) => {\n      // const msx = mouseGlobalPosition[0]\n      // const msy = mouseGlobalPosition[1]\n      if (currentLayerData) {\n        const numGridRows = currentLayerData.length;\n        if (mouseGlobalPosition) {\n          const gx = Math.floor(mouseGlobalPosition[0] / Math.min(w, h) * numGridRows);\n          const gy = Math.floor(mouseGlobalPosition[1] / Math.min(w, h) * numGridRows);\n          if (currentLayerData[gy] && currentLayerData[gy][gx]) {\n            return currentLayerData[gy][gx];\n          } else {\n            return {};\n          }\n        } else {\n          return {};\n        }\n      } else {\n        return {};\n      }\n    },\n    hoverIconX: ({hoverIconData, scale, w, h, translateX}) => hoverIconData.gy * scale * Math.min(w, h) + translateX,\n    hoverIconY: ({hoverIconData, scale, w, h, translateY}) => hoverIconData.gx * scale * Math.min(w, h) + translateY,\n    hoverIconW: ({hoverIconData, scale, w, h}) => hoverIconData.gw * scale * Math.min(w, h),\n    showHoverIcon: ({mouseGlobalPosition, hoverIconData, enableHover}) => {\n      return enableHover && mouseGlobalPosition && hoverIconData && hoverIconData.gw\n    },\n  },\n  onupdate({changed, current, previous}) {\n    // console.log(\"atlas\", changed, current.scale)\n    if (!current.context || changed.viewWidth || changed.viewHeight) {\n      const labelsContext = this.refs.labelsCanvas.getContext('2d');\n      labelsContext.imageSmoothingEnabled = false;\n      this.set({\n        context: this.refs.canvas.getContext('2d'),\n        labelsContext\n      });\n    }\n    if (changed.loading || changed.autoGridSizeMultiplier || changed.labels || changed.density || changed.maxAttributionValue || changed.classHeatmap || changed.classHeatmapMultiplier || changed.classHeatmapPositive || changed.showLabels || changed.viewWidth || changed.viewHeight || changed.scale || changed.translateX || changed.translateY || changed.iconCrop || changed.gridSize || changed.layers) {\n      this.render();\n    }\n    if (changed.hoverIconData) {\n      const {tooltip} = this.store.get();\n      const {showHoverIcon} = this.get();\n      if (showHoverIcon) {\n        tooltip.show(current.hoverIconData);\n      } else {\n        tooltip.hide();\n      }\n    }\n    if (changed.showHoverIcon) {\n      if (current.showHoverIcon == false) {\n        const { tooltip } = this.store.get();\n        tooltip.hide();\n      }\n    }\n\n  },\n  oncreate() {\n    // Turn off tooltips while zooming\n    const {tooltip} = this.store.get();\n    this.refs.d3Zoom.on(\"zoom\", () => {\n      tooltip.hide();\n    });\n    // Offscreen buffer for drawing text labels;\n    const labelsBufferCanvas = document.createElement(\"canvas\");\n    labelsBufferCanvas.width = 150 * 10;\n    labelsBufferCanvas.height = (Math.ceil(1002 / 10) + 1) * 20;\n    const labelsBufferContext = labelsBufferCanvas.getContext(\"2d\");\n    this.set({labelsBufferCanvas, labelsBufferContext});\n    setTimeout(() => {\n      this.measure();\n      this.home();\n    }, 10);\n  },\n  methods: {\n    measure() {\n      this.set({\n        viewWidth: this.refs.root.offsetWidth,\n        viewHeight: this.refs.root.offsetHeight,\n      })\n    },\n    fullscreen() {\n      this.refs.root.webkitRequestFullscreen();\n    },\n    home(duration=0) {\n      // const {homeX, homeY, homeScale} = this.get();\n      // this.transitionTo(homeX, homeY, homeScale, duration);\n      this.refs.d3Zoom.home(duration);\n    },\n    translateTo(x, y) {\n      this.refs.d3Zoom.translateTo(x, y);\n    },\n    zoomTo(x, y, scale, duration = 1000) {\n      this.refs.d3Zoom.zoomTo(x, y, scale, duration);\n    },\n    transitionTo(x, y, scale, duration=0) {\n      this.refs.d3Zoom.transformTo(x, y, scale, duration);\n    },\n    scaleBy(multiplier) {\n      const { scale } = this.get();\n      this.refs.d3Zoom.scaleTo(scale * multiplier, 300);\n    },\n    iconToGlobalPosition(icon, layerIndex) {\n      const {density, scale, translateX, translateY, config, w, h} = this.get();\n      const gridSize = config.grid_size[layerIndex];\n      const gridWidth = config.icon_size * gridSize;\n\n      const iconWidth = icon.gw * scale * Math.min(w, h);\n\n      // x, y swapped intentionally\n      const iconX = icon.gy * scale * Math.min(w, h) + translateX;\n      const iconY = icon.gx * scale * Math.min(w, h) + translateY;\n\n      const sourceX = icon.localX * config.icon_size;\n      const sourceY = icon.localY * config.icon_size;\n\n      const totalSamples = (typeof config.filter[0] == \"number\" ? config.filter[0] : config.sample_images)\n      const avgSamples = totalSamples / (gridSize * gridSize);\n\n      // Resize based on density\n      const relativeDensity = Math.min(1, Math.sqrt(density * icon.num_activations / avgSamples));\n      const adjustedIconWidth = iconWidth * relativeDensity;\n      const adjustedIconX = iconX + (iconWidth - adjustedIconWidth) / 2;\n      const adjustedIconY = iconY + (iconWidth - adjustedIconWidth) / 2\n\n      return {sourceX, sourceY, iconX: adjustedIconX, iconY: adjustedIconY, iconWidth: adjustedIconWidth}\n    },\n    clear() {\n      const {viewHeight, viewWidth, context, backgroundColor, labelsContext} = this.get();\n      context.globalAlpha = 1;\n      context.fillStyle= backgroundColor;\n      context.clearRect(0, 0, viewWidth, viewHeight);\n      context.fillRect(0, 0, viewWidth, viewHeight);\n      labelsContext.globalAlpha = 1;\n      labelsContext.clearRect(0, 0, viewWidth, viewHeight);\n    },\n    render() {\n\n      const {id, labelsContext, loading, classHeatmap, showLabels, labels, labelsBufferCanvas, imageSmoothing, scale, w, h, translateX, translateY, context, backgroundColor, config, layers, visibleLayers, currentZoomIndex, strokeColor, strokeThickness, fontSize,textShadowColor, textColor, maxAttributionValue, classHeatmapMultiplier} = this.get();\n\n      this.clear();\n      // context.imageSmoothingQuality = \"low\";\n      context.imageSmoothingEnabled = imageSmoothing;\n\n      labelsContext.strokeStyle = strokeColor;\n      labelsContext.lineWidth = strokeThickness;\n      context.fillStyle = \"white\";\n\n      if (config && layers && !loading) {\n        let visibleLayers = [\n          {i: currentZoomIndex, opacity: 1.0}\n        ];\n        this.set({visibleLayers});\n\n        visibleLayers.forEach(visibleLayer => {\n          const layerIndex = visibleLayer.i;\n          const layerOpacity = visibleLayer.opacity;\n          const icons = layers[layerIndex];\n\n            \n            // Calculating min and max indices for icon render loop\n            const minSize = Math.min(w, h);\n            const minX = Math.max(0, Math.floor(-(translateX / scale / minSize) * icons.length));\n            const maxX = minX + Math.ceil(( w / scale / minSize) * icons.length);\n            const minY = Math.max(0, Math.floor(-(translateY / scale / minSize) * icons.length));\n            const maxY = minY + Math.ceil(( h / scale / minSize) * icons.length);\n\n            for (let y = minY; y <= maxY; y++) {\n              for (let x = minX; x <= maxX; x++) {\n                \n                if (icons[y] && icons[y][x]) {\n                  const icon = icons[y][x];\n\n                  const {sourceX, sourceY, iconX, iconY, iconWidth} = this.iconToGlobalPosition(icon, layerIndex);\n                  \n                  const requestedID = id;\n                  // If icon is in the viewport \n                  // probably don't need this anymore\n                  // if (iconX > -iconWidth && iconX < w && iconY > -iconWidth && iconY < h) {\n                  if (true) {\n                    \n                    // We want to draw a box so there isn't just whiteness.\n                    if (classHeatmap > -1 || true) {\n                      labelsContext.globalAlpha = 0.3;\n                      labelsContext.strokeRect(iconX, iconY, iconWidth, iconWidth);\n                      labelsContext.globalAlpha = 1.0;\n                    }\n                    const textSkipX = Math.ceil(40 / iconWidth);\n                    const textSkipY = Math.ceil(60 / iconWidth);\n                    if (showLabels && labels && classHeatmap === -1 && icon.y % textSkipY == 0 && icon.x % textSkipX == 0 ) {\n                      labelsContext.globalAlpha = 1;\n                      const labelIndex = icon.top_class_indices[0];\n                      labelsContext.drawImage(\n                        labelsBufferCanvas,\n                        //source\n                        (labelIndex % 10) * 150, Math.floor(labelIndex / 10) * 20 + 4, Math.min(iconWidth * textSkipY - 5, 100), 20,\n                        //destination\n                        iconX, iconY + iconWidth - 20 - 2, Math.min(iconWidth * textSkipY - 5, 100), 20\n                      );\n                    }\n\n                    load(icon.url).then(response => {\n                      \n                      // check that we're still on the right layer/zoom/id\n                      const {id, visibleLayers, iconCrop, showLabels, textShadow} = this.get();\n                      // console.log(requestedID, id)\n\n                      if(visibleLayers.reduce((acc, layer) => layer.i === layerIndex ? acc + 1 : acc, 0) && requestedID === id) {\n                        const {labelsContext, labelsBufferCanvas, alphaAttributionFactor, labels, config, classHeatmap, classHeatmapMultiplier, classHeatmapPositive} = this.get();\n\n                        const {sourceX, sourceY, iconX, iconY, iconWidth} = this.iconToGlobalPosition(icon, layerIndex);\n\n                        // If we have a class heatmap active, calculate the transparency for the current icon\n                        let a = 1;\n                        if (classHeatmap > -1) {\n                          let i = icon.full_class_indices.indexOf(classHeatmap);\n                          if (i > -1) {\n                            a = icon.full_class_values[i] / maxAttributionValue;\n                            a = a * classHeatmapPositive;\n                            a = Math.max(0, a) * classHeatmapMultiplier;\n                          } else {\n                            a = 0.0;\n                          }\n                          \n                        }\n                        const computedIconCrop = Math.min(8 / iconWidth, 0.6);\n                        // draw the icon\n                        context.globalAlpha = 1;\n                        const iconOffset = (computedIconCrop * config.icon_size) / 2;\n                        // context.clearRect(iconX + 1, iconY + 1, iconWidth - 2, iconWidth - 2);\n                        if (classHeatmap > -1) {\n                          // labelsContext.beginPath();\n                          context.fillRect(iconX, iconY, iconWidth, iconWidth);\n                          // context.fill();\n                          // context.closePath();\n                        }\n                        context.globalAlpha = a;\n                        context.drawImage(response,\n                          //source\n                          sourceY + iconOffset, sourceX + iconOffset, config.icon_size - iconOffset * 2, config.icon_size - iconOffset * 2,\n                          //destination\n                          iconX, iconY, iconWidth, iconWidth\n                        );\n                        \n                        // context.globalAlpha = 1;\n                        // context.closePath();\n                        \n                      }\n                    })\n                  }\n                }\n              }\n            }\n          });\n        }\n      }\n    }\n  }\n\n</script>\n\n\n<style>\n  ref:root {\n    position: relative;\n    width: 100%;\n    height: 100%;\n    contain: layout;\n    overflow: hidden;\n  }\n  ref:stage {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n  }\n  ref:canvas, ref:labelsCanvas {\n    pointer-events: none;\n    position: absolute;\n    top: 0;\n    left: 0;\n    border-radius: 8px;\n  }\n  ref:hover {\n    position: absolute;\n    top: 0;\n    left: 0;\n    border-radius: 4px;\n    border: solid 3px black;\n    pointer-events: none;\n    box-sizing: border-box;\n  }\n</style>\n",
    "<button\n  on:click=\"fire('click')\"\n  style=\"\n    background-color: {backgroundColor};\n    color: {color};\n  \"\n>\n  <slot></slot>\n</button>\n\n<script>\nexport default {\n  data() {\n    return {\n      backgroundColor: \"rgb(255, 130, 0)\",\n      color: \"white\",\n    }\n  }\n}\n\n</script>\n\n<style>\n  button {\n    /* border: solid 2px rgb(255, 130, 0); */\n    outline: none;\n    font-size: 13px;\n    border: none;\n    padding: 0 4px;\n    font-weight: 500;\n    height: 32px;\n    line-height: 1em;\n    border-radius: 4px;\n    text-transform: uppercase;\n    align-items: center;\n    justify-content: center;\n    box-sizing: border-box;\n    vertical-align: middle;\n    -webkit-font-smoothing: antialiased;\n    margin: 0;\n  }\n</style>",
    "<div ref:root>\n  <Placeholder>\n    <div style=\"opacity: 0.4;\">\n      <LazyImage aspectRatio={1} src=\"assets/images/renders/thumbnail-{layerName}.jpg\" border={false} alt=\"thumbnail for {layerName}\" />\n    </div>\n    <AtlasReticle\n      bind:extent\n      enableDragging={true}\n      on:drag=\"fire('drag', event)\"\n    />\n  </Placeholder>\n</div>\n\n<script>\n  export default {\n    components: {\n      AtlasReticle: \"../AtlasReticle.html\",\n      LazyImage: \"../library/LazyImage.html\",\n      Placeholder: \"../library/Placeholder.html\"\n    },\n    data() {\n      return {\n        scaleCountFactor: 200\n      }\n    }\n  }\n</script>\n\n<style>\nref:root {\n  position: relative;\n  width: 100%; \n  height: 100%;\n  box-sizing: border-box;\n  padding: 1px;\n}\n</style>",
    "<div class=\"stack\">\n{#each layers as layer, i}\n  <label class=\"layer {layerName == layer ? 'selected' : ''}\">\n    <input type=radio bind:group=layerName value={layer}>\n    <div class=\"thumb\" style=\"position: relative;\">\n      <AtlasThumbnail grid={0} layerName={layer} {classHeatmap}/>\n    </div>\n    <span>{layer}</span>\n  </label>\n{/each}\n</div>\n\n<script>\n  export default {\n    components: {\n      AtlasThumbnail: \"../AtlasThumbnail.html\"\n    },\n    data() { return {\n      layerName: \"mixed4c\",\n      layers: [\n        \"mixed3a\",\n        \"mixed3b\",\n        \"mixed4a\",\n        \"mixed4b\",\n        \"mixed4c\",\n        \"mixed4d\",\n        \"mixed4e\",\n        \"mixed5a\",\n        \"mixed5b\",\n      ],\n      classHeatmap: -1\n    }; }\n  }\n</script>\n\n<style>\n.layer {\n  position: relative;\n  cursor: pointer;\n  display: grid;\n  align-items: center;\n  grid-template-columns: 1fr 1.5fr;\n  font-size: 11px;\n  text-transform: uppercase;\n  padding: 5px 16px 5px 16px;\n  color: grey;\n  border-left: solid 3px rgba(255, 255, 255, 0);\n  border-bottom: solid 1px rgba(0, 0, 0, 0.1);\n}\n.layer input {\n  position: absolute;\n  opacity: 0;\n}\n.layer span {\n  margin-left: 8px;\n}\n.layer:hover {\n  background-color: rgba(255, 130, 0, 0.04);\n}\n.layer.selected {\n  border-left-color: rgb(255, 130, 0);\n  color: rgb(255, 130, 0);\n  background-color: rgba(255, 130, 0, 0.08);\n  font-weight: bold;\n}\n.layer :global(canvas) {\n  opacity: 0.5;\n}\n.layer.selected :global(canvas) {\n  /* opacity: 1; */\n}\n.thumb {\n  width: 30px;\n  position: relative;\n}\n@media(min-width: 800px) {\n  .thumb {\n    width: 45px;\n  }\n}\n</style>\n",
    "<div class=\"chooser\">\n  {#each labels as l}\n    <label class=\"{classHeatmap === l.i ? 'selected' : ''}\">\n      <input type=radio bind:group=classHeatmap value={l.i}>\n      <span title=\"{l.i}\">{l.label}</span>\n    </label>\n  {/each}\n</div>\n\n<script>\nimport classesToKeep from './../classesToKeep.js';\nimport inceptionLabels from './../Labels.js';\n\nexport default {\n  data() {\n    return {\n      classesToKeep,\n      inceptionLabels,\n      classHeatmap: 235\n    }\n  },\n  computed: {\n    labels: ({inceptionLabels}) => {\n      let out = classesToKeep.map(k => {\n        let l = inceptionLabels.inception[k];\n        return {label: l, i: k};\n      });\n      return [{label: \"show all\", i: -1}].concat(out);\n    }\n  }\n}\n</script>\n\n<style>\n  .chooser {\n    height: auto;\n  }\n  .chooser label {\n    position: relative;\n    cursor: pointer;\n    font-size: 11px;\n    line-height: 1.2em;\n    display: block;\n    border-left: solid 3px white;\n    padding: 5px 16px 5px 16px;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    overflow-y: hidden;\n    border-bottom: solid 1px rgba(0, 0, 0, 0.1);\n  }\n  .chooser label input {\n    position: absolute;\n    opacity: 0;\n  }\n  .chooser label:hover {\n    background-color: rgba(255, 130, 0, 0.04);\n  }\n  .chooser label.selected {\n    border-left-color: rgb(255, 130, 0);\n    color: rgb(255, 130, 0);\n    background-color: rgba(255, 130, 0, 0.08);\n    font-weight: bold;\n  }\n</style>\n",
    "<!-- \n  Will start to add a transform: scale(...) when the width gets smaller than\n  the provided minWidth parameter.\n  clientWidth and clientHeight are otherwise respected.\n\n  another idea:\n  have a style parameter \n  and minWidth + aspectRatio.\n  if < minWidth, aspectRation, othewise use style.\n -->\n\n<div ref:root>\n  <div\n    ref:frame\n    style=\"\n      transform: scale({scale});\n      width: {finalWidth};\n      height: {finalHeight};\n      {style}\n    \"\n  >\n    <slot></slot>\n  </div>\n</div>\n\n<script>\nexport default {\n  data() {\n    return {\n      style: \"\",\n      aspectRatio: 1,\n      minWidth: 800,\n      clientWidth: 1000,\n      clientHeight: 1000,\n    }\n  },\n  computed: {\n    scale: ({clientWidth, minWidth}) => clientWidth / Math.max(clientWidth, minWidth),\n    finalWidth: ({clientWidth, width, minWidth}) => {\n      return Math.max(clientWidth, minWidth) + \"px\";\n    },\n    finalHeight: ({clientHeight, scale}) => {\n      return clientHeight / scale + \"px\";\n    }\n  }\n}\n</script>\n\n\n<style>\n  ref:root {\n    width: 100%;\n    position: relative;\n  }\n  ref:frame {\n    transform-origin: top left;\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n</style>",
    "\n<svelte:window on:resize=\"measure()\" />\n\n<div \n  ref:root\n  class=\"root\" \n  on:pointerdown=\"down(event)\"\n  style=\"cursor: {cursor}; position: absolute;\"\n>\n  {#if extent}\n  <svg width={clientWidth} height={clientHeight}>\n    {#if left && right && top && bottom}\n      <path\n        class=\"{background ? '' : 'transparent'}\"\n        d=\"M0,0 L{clientWidth},0 L{clientWidth},{clientHeight} L0,{clientHeight} z M{left},{top} L{left},{bottom} L{right},{bottom} L{right},{top} z\"\n      />\n    {/if}\n  </svg>\n  <div\n    class=\"reticle {round ? 'round' : ''}\"\n    style=\"\n      border-color: {color};\n      top:{top - 1}px;\n      left:{left - 1}px; \n      width:{right - left + 2}px; \n      height:{bottom - top + 2}px; \n      \"\n  >\n    {#if annotationValue}\n      <div class=\"annotationTabParent\" style=\"top:{(w * width-2)/2}px;\">\n        <div class=\"annotationTab\" style=\"background:{color};\">\n          <div class=\"annotation\">{annotationValue}</div>\n        </div>\n      </div>\n    {/if}\n  </div>\n  {/if}\n</div>\n\n<script>\n  export default {\n    data() {\n      return {\n        dragging: false,\n        extent: [[0, 0],[0, 0]],\n        background: true,\n        round: false,\n        color: \"rgb(255, 130, 0)\",\n        enableDragging: true,\n        upListener: null,\n        moveListener: null,\n        cursor: 'grab',\n        clientWidth: 98,\n        clientHeight: 98\n      }\n    },\n    computed: {\n      left: ({clientWidth, extent}) => Math.min(clientWidth, Math.max(1e-6, extent[0][0] * clientWidth)),\n      right: ({clientWidth, extent}) => Math.min(clientWidth, extent[0][1] * clientWidth),\n      top: ({clientHeight, extent}) => Math.min(clientHeight, Math.max(1e-6, extent[1][0] * clientHeight)),\n      bottom: ({clientHeight, extent}) => Math.min(clientHeight, extent[1][1] * clientHeight),\n    },\n    oncreate() {\n      setTimeout(() => this.measure(), 10);\n    },\n    methods: {\n      measure() {\n        this.set({\n          clientWidth: this.refs.root.offsetWidth,\n          clientHeight: this.refs.root.offsetHeight,\n        })\n      },\n      up() {\n        const {upListener, moveListener} = this.get();\n        window.removeEventListener(\"pointermove\", moveListener);\n        window.removeEventListener(\"pointerup\", upListener);\n        this.set({cursor: \"grab\"});\n      },\n      down(event) {\n        event.preventDefault();\n        const {enableDragging, clientWidth, clientHeight} = this.get();\n        if (enableDragging) {\n          this.move(event);\n        }\n        const upListener = this.up.bind(this);\n        window.addEventListener(\"pointerup\", upListener);\n        const moveListener = this.move.bind(this);\n        window.addEventListener(\"pointermove\", moveListener);\n        this.set({upListener, moveListener, cursor: \"grabbing\"});\n      },\n      move(event) {\n        const {clientWidth, clientHeight} = this.get();\n        const gcx = event.offsetX / clientWidth; \n        const gcy = event.offsetY / clientHeight;\n        this.set({\n          gcx,\n          gcy,\n          startPos: {x: event.screenX, y: event.screenY},\n        });\n        this.fire(\"drag\", {gcx, gcy});\n      },\n    },\n  }\n</script>\n\n<style>\n  svg {\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n  svg path {\n    fill: white;\n    fill-opacity: 0.7;\n  }\n  svg path.transparent {\n    fill-opacity: 0;\n  }\n  .root {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n  }\n  .reticle {\n    top: 0;\n    left: 0;\n    position: absolute;\n    border: solid 1px black;\n    border-width: 2px;\n    box-shadow: 0 0 6px rgba(0, 0, 0, 0.2);\n    box-sizing: border-box;\n    background: rgba(0, 0, 0, 0);\n    border-radius: 4px;\n    pointer-events: none;\n  }\n  .reticle.round {\n    border-radius: 50%;\n  }\n  .annotationTabParent {\n    position: absolute;\n    left:0px;\n  }\n  .annotationTab {\n    width: 16px;\n    height: 16px;\n    left: -16px;\n    top: -8px;\n    position: absolute;\n    border-radius: 3px 0px 0px 3px;\n  }\n  p.annotation {\n    font-size: 12px;\n    top: 0px;\n    left: 4px;\n    color: white;\n    position: absolute;\n    text-align: center;\n    line-height: 1em;\n  }\n</style>\n",
    "<div class=\"set-of-icons\" ref:annotation >\n  <div style=\"position: relative;height: 10px;\">\n    <div style=\"position: absolute; left: 0px; top: 1px;background-color:{color}; border-radius: 50%; width: 8px; height: 8px;\"></div>\n    <div style=\"position: relative; top: 4px; margin: 0 4px; border-top: solid 2px {color}; \"></div>\n    <svg style=\"position: absolute; right: 0; top: 0;\" width=10 height=10 viewBox=\"0 0 10 10\">\n      <path d=\"M 0 0 L 10 5 L 0 10 z\" fill=\"{color}\" />\n    </svg>\n  </div>\n  <div ref:icons class=\"icons\" style=\"height: {iconHeight}px;\">\n    {#each imgList as icon, i}\n      <ClippedIcon\n        icon={icon}\n        width={iconHeight}\n        {config}\n      />\n    {/each}\n  </div>\n</div>\n\n  <AtlasDataLoader \n    id={fullId}\n    bind:config\n    bind:layers \n  />\n\n<script>\nexport default {\n  components: { \n    ClippedIcon: \"./ClippedIcon.html\",\n    AtlasDataLoader: './AtlasDataLoader.html', \n  },\n  data() {\n    return {\n      container: null,\n      arrow: null,\n      arrowHeight: 30,\n      imgList: [],\n      color: '#ff6600',\n      iconHeight: 100,\n      width: 100,\n      height: 100\n    }\n  },\n  computed: {\n    fullId: ({layerName}) => \"inceptionv1_\" + layerName,\n    imgList: ({pointList, layers, pathZoomIndex}) => {\n        let imgList = [];\n        pointList.forEach((globalPosPercent) => {\n          if(layers && layers[pathZoomIndex]) {\n            const gridSelected = {\n              // assumes layers is always square\n              x: Math.floor(globalPosPercent[0] * layers[pathZoomIndex].length),\n              y: Math.floor(globalPosPercent[1] * layers[pathZoomIndex].length),\n            }\n            if(layers[pathZoomIndex][gridSelected.y] && \n              layers[pathZoomIndex][gridSelected.y][gridSelected.x]){\n              const currentIcon = layers[pathZoomIndex][gridSelected.y][gridSelected.x];\n              if(currentIcon.num_activations > 0){\n                imgList.push(layers[pathZoomIndex][gridSelected.y][gridSelected.x]);\n              }\n            }\n          }\n        });\n        return imgList;\n    },\n    pathZoomIndex: ({layers}) => {\n      if(layers){\n        return layers.length - 1\n      }\n      return 1\n    },\n  }\n}\n</script>\n\n<style>\n  .icons {\n    margin-top: 8px;\n    display: grid;\n    grid-gap: 1px;\n    grid-auto-flow: column;\n    overflow: hidden;\n    border-radius: 8px;\n  }\n</style>",
    "<div class=\"root\" >\n  {#if scale}\n  <div\n    class=\"reticle {round ? 'round' : ''}\"\n    style=\"box-sizing:content-box;\n      border-color: {color};\n      top:{top}%;\n      left:{left}%; \n      width:{right-left}%; \n      height:{bottom-top}%;\n      \"\n  >\n    {#if annotationValue}\n      <div class=\"annotationTabParent\" style=\"top:50%;\">\n        <div class=\"annotationTab\" style=\"background:{color};\">\n          <div class=\"annotation\"\n            >{annotationValue} \n          </div>\n        </div>\n      </div>\n    {/if}\n  </div>\n  {/if}\n</div>\n\n<script>\n  export default {\n    data() {\n      return {\n        width: 0,\n        height: 0,\n        dragging: false,\n        startPos: {x: -100, y: -100},\n        background: true,\n        round: false,\n        color: \"#ff6600\",\n        enableDragging: true,\n      }\n    },\n    computed: {\n      h: ({scale}) => 1 / scale,\n      w: ({scale, aspectRatio}) => 1 / scale * aspectRatio,\n      l: ({gcx, w}) => (gcx - w / 2),\n      t: ({gcy, h, aspectRatio}) => (gcy - h / 2),\n      r: ({l, w}) => l + w, \n      b: ({t, h}) => t + h,\n      left: ({l}) => l * 100,\n      right: ({r}) => r * 100,\n      top: ({t}) => t * 100,\n      bottom: ({b}) => b * 100,\n    }\n  }\n</script>\n\n<style>\n  svg {\n    position: absolute;\n    top: 0;\n    left: 0;\n  }\n  svg path {\n    fill: white;\n    fill-opacity: 0.5;\n  }\n  svg path.transparent {\n    fill-opacity: 0;\n  }\n  .root {\n    position: absolute;\n    top: 0;\n    left: 0;\n    width: 100%;\n    height: 100%;\n    box-sizing: border-box;\n  }\n  .reticle {\n    top: 0;\n    left: 0;\n    position: absolute;\n    border: solid 3px black;\n    border-radius: 3px;\n    box-shadow: 0 0 6px rgba(0, 0, 0, 0.2);\n    box-sizing: border-box;\n    background: rgba(0, 0, 0, 0);\n  }\n  .reticle.round {\n    border-radius: 50%;\n  }\n  .annotationTabParent {\n    position: absolute;\n    left:0px;\n  }\n  .annotationTab {\n    width: 16px;\n    height: 16px;\n    left: -16px;\n    top: -8px;\n    position: absolute;\n    border-radius: 3px 0px 0px 3px;\n    display: grid;\n    align-items: center;\n  }\n  .annotation {\n    line-height: 100%;\n    font-size: 12px;\n    left: 4px;\n    color: white;\n    position: absolute;\n    text-align: center;\n  }\n</style>",
    "<div class=\"root\" style=\"width: {width}px; height: {height}px;\">\n  <div class=\"loupe\" style=\"border-color: {color}\">\n    <slot></slot>\n  </div>\n  {#if label}\n    <div class=\"label\" style=\"background-color: {color};\">{label}</div>\n  {/if}\n</div>\n\n<script>\n  export default {\n    data() {\n      return {\n        label: null,\n        width: null,\n        height: null,\n        color: \"#ff6600\"\n      }\n    }\n  }\n</script>\n\n<style>\n.root {\n  position: relative;\n  width: 100%;\n  height: 100%;\n}\n.loupe {\n  box-sizing: border-box;\n  width: 100%;\n  height: 100%;\n  position: relative;\n  overflow: hidden;\n  border: solid 3px #ff6600;\n  border-radius: 50%;\n  position: relative;\n}\n.label {\n  color: white;\n  font-size: 14px;\n  font-weight: 600;\n  background: #ff6600;\n  border-radius: 6px 0 0 6px;\n  padding:0 6px;\n  position: absolute;\n  top: calc(50% - 12px);\n  right: calc(100% - 2px);\n  height: 24px;\n  line-height: 24px;\n}\n</style>",
    "<div class=\"root\">\n  <div class=\"head\">\n    <slot name=\"head\"></slot>\n  </div>\n  <div class=\"body\">\n    <slot name=\"body\"></slot>\n  </div>\n</div>\n\n<style>\n  .root {\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n  }\n  :global() .head {\n    height: 60px;\n    padding: 0 16px;\n    border-bottom: solid 1px rgba(0, 0, 0, 0.2);\n    /* box-sizing: border-box; */\n    display: flex;\n    align-items: center;\n    flex: 0 0 60px;\n  }\n  :global() .head h2 {\n    font-size: 16px;\n    font-weight: bold;\n    line-height: 1.4em;\n    margin: 0;\n    padding: 0;\n    border: none;\n  }\n  :global() .body {\n    position: relative;\n    flex: 1;\n    overflow-y: scroll;\n    font-size: 11px;\n    line-height: 1.6em;\n  }\n  :global() .body h3 {\n    font-size: 12px;\n    font-weight: 600;\n    line-height: 1.2em;\n    text-transform: uppercase;\n    margin: 8px 0;\n    height: auto;\n    border-top: solid 1px rgba(0, 0, 0, 0.1);\n    padding-top: 1em;\n  }\n</style>\n",
    "<div \n  ref:root \n  class=\"d3zoom\" \n  on:mousemove=\"mouseMove(event)\"\n  on:mousedown=\"set({msx: null, msy: null})\"\n  on:mouseout=\"set({msx: null, msy: null})\"\n>\n  <slot />\n</div>\n\n<script>\nimport {zoomIdentity as d3ZoomIdentity, zoom as d3Zoom, zoomTransform as d3ZoomTransform} from \"d3-zoom\";\nimport {event as d3Event, select as d3Select} from \"d3-selection\";\nimport { tween } from 'svelte-extras';\nimport * as eases from 'eases-jsnext';\n\nexport default {\n  data() {\n    return {\n      z: d3Zoom(), //d3 zoom object\n      el: null,\n      selection: null, //the d3 selection of the root\n      transform: null, // the d3 transform\n      scaleExtent: [1, 48], //\n      homeScale: 1,\n      homeX: 0.5,\n      homeY: 0.5,\n      scale: null,\n      translateX: null,\n      translateY: null,\n      k: 1,\n      x: 0,\n      y: 0,\n      msx: null,\n      msy: null,\n      disableBehaviors: false,\n      scrollWheel: false,\n    };\n  },\n  computed: {\n    minSize: ({clientWidth, clientHeight}) => Math.min(clientWidth, clientHeight),\n    mouseOver: ({msx, msy}) => msx != undefined && msy != undefined,\n    mouseGlobalPosition: ({transform, msx, msy, clientHeight, clientWidth, minSize}) => {\n      if (transform && msx != undefined && msy != undefined) {\n        return [\n          transform.invertX(msx),// - (clientWidth - minSize) / 2,\n          transform.invertY(msy),// - (clientHeight - minSize) / 2,\n        ];\n      } else {\n        return null;\n      }\n    },\n    extent: ({scale, translateX, translateY, minSize, clientWidth, clientHeight}) => {\n      const x0 = - translateX / scale;\n      const y0 = - translateY / scale;\n      const x1 = x0 + clientWidth / scale;\n      const y1 = y0 + clientHeight / scale;\n      return [\n        [x0 / minSize, x1 / minSize],\n        [y0 / minSize, y1 / minSize],\n      ]\n    },\n    gcx: ({extent}) => (extent[0][0] + extent[0][1]) / 2,\n    gcy: ({extent}) => (extent[1][0] + extent[1][1]) / 2,\n  },\n  \n  oncreate() {\n    const {z, scaleExtent, minSize, clientWidth, clientHeight, homeScale, homeX, homeY, disableBehaviors} = this.get();\n    const that = this; // needed because d3 gives \"this\" as the node, not component.\n    z.wheelDelta(() => {\n      let d = -d3Event.deltaY * (d3Event.deltaMode ? 120 : 1) / 500;\n      if (d3Event.ctrlKey) {\n        d = d * 10;\n      }\n      return d;\n    });\n    z.scaleExtent(scaleExtent);\n    const selection = d3Select(this.refs.root);\n    this.set({\n      selection,\n      el: this.refs.root,\n    });\n    if (!disableBehaviors) {\n      z(selection);\n    }\n    z.filter(this.zoomEventFilter.bind(this));\n    z.on(\"zoom\", () => { this.onzoom(that); });\n    z.translateTo(selection, homeX * minSize, homeY * minSize)\n    z.scaleTo(selection, homeScale);\n  },\n  onstate({changed, current, previous}) {\n    if (previous != undefined) {\n      if ((changed.clientWidth || changed.clientHeight) && current.el) {\n        this.update();\n      }\n    }\n    // console.log(\"update\", changed, current.scale)\n    const {z, selection, el, x, y} = this.get();\n    // if (changed.scaleExtent && current.scaleExtent) { z.scaleExtent(current.scaleExtent) } \n    if (selection) {\n\n      // if (changed.x || changed.y) {\n      //   z.translateTo(selection, current.x, current.y);\n      // }\n\n      // if (changed.scale) { this.set({k: current.scale}); }\n      // if (changed.k) { z.scaleTo(selection, current.k); } \n\n      // if (changed.translateX) { this.set({x: current.translateX}); }\n      // if (changed.translateY) { this.set({x: current.translateY}); }\n\n    }\n  },\n  methods: {\n    tween,\n    zoomEventFilter: function() {\n      const {scrollWheel, touchPan, disableBehaviors} = this.get();\n      // console.log(d3Event)\n      if (disableBehaviors) {\n        return false;\n      }\n      // if (!touchPan && d3Event.touches) {\n      //   if (d3Event.touches.length === 1) {\n      //     return false;\n      //   }\n      // }\n      // If we want to suppress scroll wheel events...\n      if (!scrollWheel) {\n        // ... return false for scroll wheel events + button = 1 events\n        return !(d3Event.type === \"wheel\" && d3Event.ctrlKey === false) && !d3Event.button;\n      } else {\n        //... just return false for button = 1 events\n        return !d3Event.button;\n      }\n    },\n    mouseMove: function(event) {\n      const msx = event.offsetX;\n      const msy = event.offsetY;\n      this.set({\n        msx, msy\n      });\n      const {mouseGlobalPosition} = this.get();\n    },\n    update: function() {\n      \n      const {clientWidth, clientHeight, minSize, el, z} = this.get();\n      const transform = d3ZoomTransform(el);\n      // console.log(\"update\", transform.k)\n      const scale = transform.k;\n      this.set({\n        scale,\n        transform,\n        translateX: transform.x, // + scale * (clientWidth - minSize) / 2,\n        translateY: transform.y, // + scale * (clientHeight - minSize) / 2,\n      });\n    },\n    onzoom: function(that) {\n      // console.log(\"onzoom\")\n      that.update();\n      that.fire(\"zoom\");\n    },\n    zoomTo: function(x, y, scale = 1, duration = 1000) {\n      const {selection, z, minSize, clientWidth, clientHeight} = this.get();\n\n      selection.transition()\n        .duration(duration)\n        .call(z.transform, \n          d3ZoomIdentity\n            .translate(clientWidth / 2, clientHeight / 2)\n            .scale(scale)\n            .translate(- x * minSize, - y * minSize));\n    },\n    translateTo: function(x, y) {\n      const {z, selection, minSize} = this.get();\n      z.translateTo(selection, x * minSize, y * minSize)\n    },\n    home: function(duration=0) {\n\n      const {homeX, homeY, homeScale} = this.get();\n      this.zoomTo(homeX, homeY, homeScale, duration)\n\n      // selection.transition()\n      //   .duration(duration)\n      //   .call(z.transform, \n      //     d3ZoomIdentity\n      //       .translate(clientWidth / 2, clientHeight / 2)\n      //       .translate(- 0.5 * minSize, - 0.5 * minSize));\n    },\n    scaleTo: function(scale, duration=0) {\n      // console.log(\"scaleTo\", duration)\n      const {z, selection} = this.get();\n      selection.transition()\n        .duration(duration)\n        .call(z.scaleTo, scale);\n    }\n  }\n}\n</script>\n\n<style>\nref:root {\n  position: relative;\n  background: white;\n  width: 100%;\n  height: 100%;\n}\n</style>",
    "\n<div style=\"height: {height}px;\">\n  <canvas ref:canvas width={gridSize} height={gridSize} style=\"width: 100%;\"></canvas>\n</div>\n\n<script>\nimport { load } from 'lucid-components';\nimport classesToKeep from './classesToKeep.js';\n\n\nimport inceptionv1_mixed3a from \"../public/_cache/inceptionv1_mixed3a/inceptionv1_mixed3a.json\";\nimport inceptionv1_mixed3b from \"../public/_cache/inceptionv1_mixed3b/inceptionv1_mixed3b.json\";\nimport inceptionv1_mixed4a from \"../public/_cache/inceptionv1_mixed4a/inceptionv1_mixed4a.json\";\nimport inceptionv1_mixed4b from \"../public/_cache/inceptionv1_mixed4b/inceptionv1_mixed4b.json\";\nimport inceptionv1_mixed4c from \"../public/_cache/inceptionv1_mixed4c/inceptionv1_mixed4c.json\";\nimport inceptionv1_mixed4d from \"../public/_cache/inceptionv1_mixed4d/inceptionv1_mixed4d.json\";\nimport inceptionv1_mixed4e from \"../public/_cache/inceptionv1_mixed4e/inceptionv1_mixed4e.json\";\nimport inceptionv1_mixed5a from \"../public/_cache/inceptionv1_mixed5a/inceptionv1_mixed5a.json\";\nimport inceptionv1_mixed5b from \"../public/_cache/inceptionv1_mixed5b/inceptionv1_mixed5b.json\";\n\nconst configs = {\n  inceptionv1_mixed3a: inceptionv1_mixed3a,\n  inceptionv1_mixed3b: inceptionv1_mixed3b,\n  inceptionv1_mixed4a: inceptionv1_mixed4a,\n  inceptionv1_mixed4b: inceptionv1_mixed4b,\n  inceptionv1_mixed4c: inceptionv1_mixed4c,\n  inceptionv1_mixed4d: inceptionv1_mixed4d,\n  inceptionv1_mixed4e: inceptionv1_mixed4e,\n  inceptionv1_mixed5a: inceptionv1_mixed5a,\n  inceptionv1_mixed5b: inceptionv1_mixed5b,\n}\n\nexport default {\n  data() {\n    return {\n      root: \"gcs-back\",\n      model: \"inceptionv1\",\n      layerName: \"mixed4d\",\n      grid: 1,\n      layout: 0,\n      gridSize: 10,\n      classHeatmap: -1,\n      icons: [],\n      clientWidth: 45\n    };\n  },\n  computed: {\n    height: ({clientWidth}) => clientWidth,\n    id: ({model, layerName}) => model + \"_\" + layerName\n  },\n  oncreate() {\n    const {root, id, grid} = this.get();\n    const config = configs[id]\n    // console.log(\"config: \", config)\n    if (config.class_filter == null) { config.class_filter = \"None\" }\n    if (config.filter == null) { config.filter = \"None\" }\n    if (!Array.isArray(config.layout)) {config.layout = [config.layout]}\n    if (!Array.isArray(config.layer)) {config.layer = [config.layer]}\n    if (!Array.isArray(config.filter)) {config.filter = [config.filter]}\n    this.set({gridSize: config.grid_size[grid], layerName: config.layer[0]})\n    const url = `${root}/${id}/web/web--grid_size=${config.grid_size[grid]}--layout=${config.layout[0]}--class_filter=${config.class_filter}--filter=${config.filter[0]}--layer=${config.layer[0]}--model=${config.model}--sample_images=${config.sample_images}--sample_type=${config.sample_type}.json`\n    // console.log(\"config\", config)\n    load(url).then(web => {\n      // console.log(\"web\", web)\n      this.set({icons: web});\n      this.render();\n    });\n  },\n  onupdate({changed}) {\n    if (changed.classHeatmap) {\n      this.render();\n    }\n  },\n  methods: {\n    render() {\n      const {grid, gridSize, icons, classHeatmap, layerName} = this.get();\n      const context = this.refs.canvas.getContext('2d');\n      let imageData = context.getImageData(0, 0, gridSize, gridSize);\n      let data = imageData.data;\n      let flipX = false;\n      let flipY = false;\n      switch (layerName) {\n        case \"mixed4a\":\n          flipX = true;\n          flipY = true;\n          break;\n        case \"mixed4d\":\n          flipX = true;\n          flipY = false;\n          break;\n        case \"mixed5a\":\n          flipX = true;\n          flipY = false;\n          break;\n        case \"mixed5b\":\n          flipX = true;\n          flipY = false;\n          break;\n      }\n      // for (var i = 0; i < data.length; i += 4) {\n        // data[i] = 100;\n        // data[i + 1] = 100;\n        // data[i + 2] = 100;\n        // data[i + 3] = 255;\n      // }\n      for (const icon of icons) {\n        let heatmapMultiplier = 1.0;\n        if (classHeatmap > -1) {\n          let ci = classesToKeep.indexOf(classHeatmap);\n          let value = Math.max(0, icon.f[ci]);\n          heatmapMultiplier = Math.max(0.1, value * 20);\n          // console.log(ci, value)\n        }\n        const y = flipX ? (gridSize - icon.x - 1) : icon.x; //x,y switched on purpose \n        const x = flipY ? (gridSize - icon.y - 1) : icon.y; //x,y switched on purpose\n        // data[y * gridSize * 4 + x * 4 + 0] = (heatmapMultiplier) * 255 * 20;\n        // data[y * gridSize * 4 + x * 4 + 1] = (heatmapMultiplier) * 130 * 20;\n        // data[y * gridSize * 4 + x * 4 + 2] = (heatmapMultiplier) * 1 * 20;\n        data[y * gridSize * 4 + x * 4 + 3] = 40 + (gridSize > 20 ? 0.0008 : 0.00015) * gridSize * gridSize * (icon.n / Math.pow((grid + 1), 2)) * heatmapMultiplier;\n      }\n      \n      context.putImageData(imageData, 0, 0);\n    }\n  }\n}\n\n\n</script>\n<style>\ncanvas {\n  image-rendering: pixelated;\n}\n</style>"
  ],
  "names": [],
  "mappings": "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"
}